package com.amongus.bot.game.states;

import com.amongus.bot.core.AmongUsBot;
import com.amongus.bot.game.lobby.GameLobby;
import com.amongus.bot.game.lobby.LobbySettings;
import com.amongus.bot.models.Player;
import com.amongus.bot.game.tasks.Task;
import com.amongus.bot.game.tasks.SimpleTask;
import com.amongus.bot.game.tasks.TaskDifficulty;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledFuture;

/**
 * Game state for when the game is actively being played.
 */
public class GameActiveState implements GameState {
    private static final Logger logger = LoggerFactory.getLogger(GameActiveState.class);
    
    private static final String STATE_NAME = "ACTIVE";
    private static final long SCAN_COOLDOWN_MS = 30000; // 30 seconds cooldown for scan action
    private static final long REACTOR_MELTDOWN_TIME_MS = 90000; // 1.5 minutes for reactor sabotage
    
    // Sabotage types
    public enum SabotageType {
        NONE,
        LIGHTS,
        REACTOR
    }
    
    // Current active sabotage
    private volatile SabotageType activeSabotage = SabotageType.NONE;
    
    // Player waiting to confirm sabotage fix with photo
    private volatile Long playerFixingLights = null;
    
    // Players at reactor locations
    private volatile Long playerAtReactorLocation1 = null;
    private volatile Long playerAtReactorLocation2 = null;
    private volatile boolean photoReceivedFromLocation1 = false;
    private volatile boolean photoReceivedFromLocation2 = false;
    
    // Reactor meltdown timer management
    private volatile Long reactorSabotageStartTime = null;
    private volatile ScheduledFuture<?> reactorMeltdownTimer = null;
    
    // Shared thread pool for all game instances
    private static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(4);
    
    // Map to track the last time each player used the scan feature
    private final Map<Long, Long> lastScanTimeByPlayer = new ConcurrentHashMap<>();
    
    // Map to track the last time each impostor killed
    private final Map<Long, Long> lastKillTimeByImpostor = new ConcurrentHashMap<>();
    
    // Map to store fake tasks for each impostor and their completion status
    private final Map<Long, List<String>> fakeTasksByImpostor = new ConcurrentHashMap<>();
    private final Map<Long, List<Boolean>> fakeTaskCompletionByImpostor = new ConcurrentHashMap<>();
    
    // Map to store sabotage menu message IDs for deletion
    private final Map<Long, Integer> sabotageMenuMessageIds = new ConcurrentHashMap<>();
    
    // Instance-based emergency meeting synchronization
    private final AtomicBoolean emergencyMeetingInProgress = new AtomicBoolean(false);
    
    // Global active games registry for cleanup
    private static final Map<String, GameActiveState> activeGames = new ConcurrentHashMap<>();
    
    @Override
    public String getStateName() {
        return STATE_NAME;
    }
    
    @Override
    public void onEnter(AmongUsBot bot, GameLobby lobby) {
        if (lobby == null) {
            logger.error("Cannot enter GameActiveState: lobby is null");
            return;
        }
        
        String lobbyCode = lobby.getLobbyCode();
        logger.info("Entered active game state for game {}", lobbyCode);
        
        // Register this game instance
        activeGames.put(lobbyCode, this);
        
        // Initialize game state
        initializeGameState(lobby);
        
        // Send game start messages and action keyboards to all players
        sendGameStartMessages(bot, lobby);
    }
    
    private void initializeGameState(GameLobby lobby) {
        if (lobby == null || lobby.getSettings() == null) {
            logger.error("Cannot initialize game state: lobby or settings is null");
            return;
        }

        // Initialize game state - tasks are already assigned by SetupState
        // No need to reassign tasks here
        logger.debug("Game state initialized for lobby {}", lobby.getLobbyCode());
    }
    
    private void sendGameStartMessages(AmongUsBot bot, GameLobby lobby) {
        for (Player player : lobby.getPlayerList()) {
            if (player == null) {
                logger.warn("Encountered null player in lobby {}", lobby.getLobbyCode());
                continue;
            }
            
            if (player.getChatId() == null) {
                logger.warn("Player {} has no chatId, skipping game start message", player.getUserId());
                continue;
            }
            
            logger.debug("Sending game start message to player {} in game {}", player.getUserId(), lobby.getLobbyCode());
            
            // Create message with tasks and action buttons
            StringBuilder gameMessage = new StringBuilder();
            gameMessage.append("üéÆ *–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!*\n\n");
            
            if (!player.isImpostor()) {
                // Show current tasks for crewmates
                gameMessage.append("üìã *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è:*\n");
                List<Task> tasks = player.getTasks();
                if (tasks != null && !tasks.isEmpty()) {
                    for (int i = 0; i < tasks.size(); i++) {
                        Task task = tasks.get(i);
                        String status = task.isCompleted() ? "‚úÖ" : "‚è≥";
                        gameMessage.append(status).append(" ").append(i + 1).append(". ").append(task.getName()).append("\n");
                    }
                } else {
                    gameMessage.append("–ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã\n");
                }
                gameMessage.append("\n");
            } else {
                // Show fake tasks for impostors
                gameMessage.append("üìã *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è:*\n");
                
                // Initialize fake tasks for this impostor if they don't exist yet
                if (!fakeTasksByImpostor.containsKey(player.getUserId())) {
                    initializeFakeTasksForImpostor(player.getUserId(), lobby.getSettings().getTasksPerPlayer());
                }
                
                List<String> impostor_tasks = fakeTasksByImpostor.get(player.getUserId());
                List<Boolean> completionStatus = fakeTaskCompletionByImpostor.get(player.getUserId());
                
                if (impostor_tasks != null && !impostor_tasks.isEmpty()) {
                    for (int i = 0; i < impostor_tasks.size(); i++) {
                        String status = (completionStatus != null && i < completionStatus.size() && completionStatus.get(i)) ? "‚úÖ" : "‚è≥";
                        gameMessage.append(status).append(" ").append(i + 1).append(". ").append(impostor_tasks.get(i)).append("\n");
                    }
                } else {
                    gameMessage.append("–ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã\n");
                }
                gameMessage.append("\n");
            }
            
            gameMessage.append("üîΩ *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π:*");
            
            SendMessage message = new SendMessage();
            message.setChatId(player.getChatId());
            message.setText(gameMessage.toString());
            message.setParseMode("Markdown");
            message.setReplyMarkup(createActionKeyboard(lobby, player));
            
            bot.executeMethod(message);
            logger.debug("Sent game start message with keyboard to player {} ({})", player.getUserName(), player.getUserId());
            
            // Send detailed task information message for both crewmates and impostors
            sendDetailedTaskMessage(bot, player, lobby);
        }
    }
    
    private void sendDetailedTaskMessage(AmongUsBot bot, Player player, GameLobby lobby) {
        StringBuilder taskMessage = new StringBuilder();
        taskMessage.append("*–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:*\n\n");
        
        if (!player.isImpostor()) {
            // Show detailed tasks for crewmates
            List<Task> tasks = player.getTasks();
            if (tasks != null && !tasks.isEmpty()) {
                for (int i = 0; i < tasks.size(); i++) {
                    Task task = tasks.get(i);
                    taskMessage.append("üìã ").append(i + 1).append(". ").append(task.getName())
                               .append(" (").append(task.getDifficulty().getDisplayName()).append(")\n");
                    taskMessage.append("   ").append(task.getDescription()).append("\n\n");
                }
            } else {
                taskMessage.append("–ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã\n");
            }
        } else {
            // Show fake tasks for impostors with descriptions
            List<String> impostor_tasks = fakeTasksByImpostor.get(player.getUserId());
            if (impostor_tasks != null && !impostor_tasks.isEmpty()) {
                for (int i = 0; i < impostor_tasks.size(); i++) {
                    String taskName = impostor_tasks.get(i);
                    taskMessage.append("üìã ").append(i + 1).append(". ").append(taskName).append("\n");
                    taskMessage.append("   ").append(getTaskDescription(taskName)).append("\n\n");
                }
            } else {
                taskMessage.append("–ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã\n");
            }
        }
        
        // Send the task message (permanent)
        SendMessage sendTaskMessage = new SendMessage();
        sendTaskMessage.setChatId(player.getChatId());
        sendTaskMessage.setText(taskMessage.toString());
        sendTaskMessage.setParseMode("Markdown");
        
        bot.executeMethod(sendTaskMessage);
        logger.debug("Sent detailed task information to player {} ({})", player.getUserName(), player.getUserId());
    }
    
    private String getTaskDescription(String taskName) {
        // Mapping task names to descriptions (based on the ones from SetupState)
        switch (taskName) {
            case "–°–æ—á–Ω—ã–π –Ω–∞—Å–æ—Å": return "–ù–∞—Å–æ—Å–∏ —à–∞—Ä–∏–∫ –Ω–∞ –Ω–∞—Å–æ—Å –∏ –≤–¥—É–π –µ–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é. (2 —ç—Ç–∞–∂)";
            case "–ù–∞–∫–ª–µ–π–∫–∞": return "–ù–∞–∫–ª–µ–π —Å—Ç–∏–∫–µ—Ä –Ω–∞ –æ–±—â—É—é –¥–æ—Å–∫—É. (–î–æ–º –Ω–∞ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–∫–µ -> –°—Ç–∞—Ä—ã–π –¥–æ–º)";
            case "–†–∞–∑—É–∫—Ä–∞—à–∫–∞": return "–†–∞—Å—Å–∫—Ä–∞—Å—å –∑–≤–µ—Ä—å–∫–∞ 3-–º—è —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏. (2 —ç—Ç–∞–∂)";
            case "–•–æ–ª—Å—Ç": return "–ü—Ä–æ–¥–æ–ª–∂–∏ –æ–±—â–∏–π —Ä–∏—Å—É–Ω–æ–∫ –Ω–∞ —Ö–æ–ª—Å—Ç–µ. (–ó–∞–ª)";
            case "–§–æ—Ç–æ–≥—Ä–∞—Ñ": return "–°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —Ü–≤–µ—Ç–æ—á–∫–∞–º–∏. (–£–ª–∏—Ü–∞)";
            case "–ß–µ—Ä–µ–ø–∞—à—å—è –º–µ—Ç–∫–æ—Å—Ç—å": return "–ü–æ–ø–∞–¥–∏ 4-–º—è —à–∞—Ä–∏–∫–∞–º–∏ –≤ –æ–±–ª–∞—Å—Ç—å –±–µ–ª–æ–≥–æ –∫—Ä—É–≥–∞. (–í–æ—Ä–æ—Ç–∞ –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–æ–∫)";
            case "–°–ø–∞–π–¥–µ—Ä-–º–µ–Ω": return "–ù–∞–π–¥–∏ –≤—Å–µ—Ö –ø–∞—É—á–∫–æ–≤. (2 —ç—Ç–∞–∂)";
            case "–ü–∞–∑–ª": return "–°–æ–±–µ—Ä–∏ –ø–∞–∑–ª, –±–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å. (–°—Ç–æ–ª —É –∫–æ—Å—Ç—Ä–∞)";
            default: return "–í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.";
        }
    }
    
    @Override
    public void onExit(AmongUsBot bot, GameLobby lobby) {
        if (lobby == null) {
            logger.error("Cannot exit GameActiveState: lobby is null");
            return;
        }
        
        String lobbyCode = lobby.getLobbyCode();
        logger.info("Exited active game state for game {}", lobbyCode);
        
        // Clean up resources
        cleanup(lobbyCode);
    }
    
    /**
     * Cleans up all resources associated with this game
     */
    private void cleanup(String lobbyCode) {
        // Reset emergency meeting flag
        emergencyMeetingInProgress.set(false);
        
        // Clean up reactor meltdown timer if active
        if (reactorMeltdownTimer != null && !reactorMeltdownTimer.isDone()) {
            reactorMeltdownTimer.cancel(true);
            reactorMeltdownTimer = null;
        }
        
        // Clear all maps
        lastScanTimeByPlayer.clear();
        lastKillTimeByImpostor.clear();
        fakeTasksByImpostor.clear();
        fakeTaskCompletionByImpostor.clear();
        sabotageMenuMessageIds.clear();
        
        // Reset sabotage state
        activeSabotage = SabotageType.NONE;
        playerFixingLights = null;
        playerAtReactorLocation1 = null;
        playerAtReactorLocation2 = null;
        photoReceivedFromLocation1 = false;
        photoReceivedFromLocation2 = false;
        reactorSabotageStartTime = null;
        
        // Remove from active games
        activeGames.remove(lobbyCode);
        
        logger.debug("Cleaned up game resources for game {}", lobbyCode);
    }
    
    /**
     * Static method to get game instance for a lobby
     */
    public static GameActiveState getGameForLobby(String lobbyCode) {
        return activeGames.get(lobbyCode);
    }
    
    /**
     * Static cleanup method for emergency situations
     */
    public static void forceCleanupAll() {
        for (GameActiveState game : activeGames.values()) {
            game.cleanup("");
        }
        activeGames.clear();
        logger.info("Force cleaned up all game resources");
    }
    
    @Override
    public GameState handleUpdate(AmongUsBot bot, GameLobby lobby, Update update) {
        if (lobby == null || !update.hasCallbackQuery()) {
            return null;
        }
        
        String callbackData = update.getCallbackQuery().getData();
        Long userId = update.getCallbackQuery().getFrom().getId();
        
        // Validate user and player
        if (userId == null) {
            logger.warn("Received callback with null userId in game {}", lobby.getLobbyCode());
            return null;
        }
        
        // Get the player
        Player player = lobby.getPlayer(userId);
        if (player == null) {
            logger.warn("Received callback from non-player user {} in game {}", 
                    userId, lobby.getLobbyCode());
            return null;
        }
        
        // Validate callback data
        if (callbackData == null || callbackData.trim().isEmpty()) {
            logger.warn("Received empty callback data from player {} in game {}", 
                    userId, lobby.getLobbyCode());
            return null;
        }

        // Track if a state transition already occurred in a handler
        boolean stateChanged = false;
        
        // Handle actions based on the callback data
        if (callbackData.startsWith("task:")) {
            handleTaskAction(bot, lobby, player, callbackData);
        } else if (callbackData.equals("report_body")) {
            showConfirmationDialog(bot, player, "report_body_confirm", "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ç–µ–ª–µ?");
        } else if (callbackData.equals("report_body_confirm")) {
            return handleReportActionConfirmed(bot, lobby, player);
        } else if (callbackData.equals("emergency_meeting")) {
            showConfirmationDialog(bot, player, "emergency_meeting_confirm", "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ?");
        } else if (callbackData.equals("emergency_meeting_confirm")) {
            return handleEmergencyMeetingActionConfirmed(bot, lobby, player);
        } else if (callbackData.startsWith("kill:")) {
            handleKillAction(bot, lobby, player, callbackData);
        } else if (callbackData.startsWith("fake_task:")) {
            handleFakeTaskAction(bot, lobby, player, callbackData);
        } else if (callbackData.equals("sabotage_menu")) {
            handleSabotageMenuAction(bot, lobby, player);
        } else if (callbackData.startsWith("sabotage:")) {
            handleSpecificSabotage(bot, lobby, player, callbackData);
        } else if (callbackData.equals("fix_lights")) {
            handleFixLightsAction(bot, lobby, player);
        } else if (callbackData.equals("reactor_location1")) {
            handleReactorLocation1Action(bot, lobby, player);
        } else if (callbackData.equals("reactor_location2")) {
            handleReactorLocation2Action(bot, lobby, player);
        } else if (callbackData.equals("kill_menu")) {
            // This case is no longer used since we removed kill_menu callback
            updatePlayerActionKeyboard(bot, lobby, player); // Just update the keyboard
        } else if (callbackData.equals("kill_cooldown")) {
            handleKillCooldownAction(bot, lobby, player);
        } else if (callbackData.equals("i_was_killed")) {
            showConfirmationDialog(bot, player, "i_was_killed_confirm", "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª–∏ —É–±–∏—Ç—ã?");
        } else if (callbackData.equals("i_was_killed_confirm")) {
            handleIWasKilledActionConfirmed(bot, lobby, player);
            // Check if game state was changed to GameOverState by the handler
            stateChanged = (lobby.getGameState() instanceof GameOverState);
        } else if (callbackData.equals("scan")) {
            handleScanAction(bot, lobby, player);
        } else if (callbackData.equals("check")) {
            handleCheckAction(bot, lobby, player);
        } else if (callbackData.equals("back_to_main")) {
            handleBackToMainAction(bot, lobby, player);
        } else if (callbackData.equals("confirmation_cancel")) {
            handleCancelConfirmation(bot, lobby, player);
        }
        
        // Only check win conditions if no state change occurred in the handler
        if (!stateChanged) {
            GameState nextState = checkWinConditions(bot, lobby);
            if (nextState != null) {
                return nextState;
            }
        }
        
        return null;
    }
    
    @Override
    public boolean canPerformAction(GameLobby lobby, Long userId, String action) {
        Player player = lobby.getPlayer(userId);
        if (player == null || !player.isAlive()) {
            return false;
        }
        
        if (action.startsWith("task:") && !player.isImpostor()) {
            return true;
        } else if (action.equals("report_body")) {
            return true;
        } else if (action.equals("emergency_meeting")) {
            return true;
        } else if (action.startsWith("kill:") && player.isImpostor()) {
            return true;
        }
        
        return false;
    }
    
    /**
     * Creates an action keyboard based on the player's role.
     * 
     * @param lobby The game lobby
     * @param player The player
     * @return The inline keyboard markup
     */
    private InlineKeyboardMarkup createActionKeyboard(GameLobby lobby, Player player) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        if (player.isImpostor()) {
            // Impostor actions
            createImpostorKeyboard(lobby, player, keyboard);
        } else {
            // Crewmate actions
            createCrewmateKeyboard(lobby, player, keyboard);
        }
        
        // Common actions for all roles
        createCommonActionButtons(keyboard, lobby, player);
        
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }
    
    /**
     * Creates action buttons for Impostors.
     * 
     * @param lobby The game lobby
     * @param player The player
     * @param keyboard The keyboard to add buttons to
     */
    private void createImpostorKeyboard(GameLobby lobby, Player player, List<List<InlineKeyboardButton>> keyboard) {
        // Instead of adding kill buttons directly, we'll add a "Task" section that's actually fake tasks
        // This way the UI for all players looks consistent
        
        // Initialize fake tasks for this impostor if they don't exist yet
        if (!fakeTasksByImpostor.containsKey(player.getUserId())) {
            initializeFakeTasksForImpostor(player.getUserId(), lobby.getSettings().getTasksPerPlayer());
        }
        
        // Add fake task buttons with appropriate status icons
        List<String> impostor_tasks = fakeTasksByImpostor.get(player.getUserId());
        List<Boolean> completionStatus = fakeTaskCompletionByImpostor.get(player.getUserId());
        
        for (int i = 0; i < impostor_tasks.size(); i++) {
            List<InlineKeyboardButton> taskRow = new ArrayList<>();
            InlineKeyboardButton taskButton = new InlineKeyboardButton();
            
            boolean completed = completionStatus.get(i);
            String status = completed ? "‚úÖ" : "üìã";
            
            taskButton.setText(status + " " + impostor_tasks.get(i));
            taskButton.setCallbackData("fake_task:" + i);
            taskRow.add(taskButton);
            keyboard.add(taskRow);
        }
        
        // Sabotage menu (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º –¥–ª—è –∏–º–ø–æ—Å—Ç–æ—Ä–æ–≤ - –∏–¥–µ—Ç –ø–µ—Ä–≤–æ–π)
        List<InlineKeyboardButton> sabotageMenuRow = new ArrayList<>();
        InlineKeyboardButton sabotageMenuButton = new InlineKeyboardButton();
        
        // Use cooldown system for consistency in UI but now for sabotage
        if (isKillOnCooldown(player.getUserId(), lobby)) {
            int remainingCooldown = getKillCooldownRemaining(player.getUserId(), lobby);
            sabotageMenuButton.setText("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã (" + remainingCooldown + "—Å)");
            sabotageMenuButton.setCallbackData("kill_cooldown"); // Keep this callback for consistency
        } else {
            sabotageMenuButton.setText("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã");  // This now opens sabotage menu instead of kill menu
            sabotageMenuButton.setCallbackData("sabotage_menu"); // Changed from kill_menu to sabotage_menu
        }
        
        sabotageMenuRow.add(sabotageMenuButton);
        keyboard.add(sabotageMenuRow);
        
        // Add scan button for impostor (—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–¥–µ—Ç –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∏–º–ø–æ—Å—Ç–æ—Ä–æ–≤)
        List<InlineKeyboardButton> scanRow = new ArrayList<>();
        InlineKeyboardButton scanButton = new InlineKeyboardButton();
        
        boolean scanOnCooldown = isScanOnCooldown(player.getUserId());
        String scanText = scanOnCooldown 
            ? "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏" 
            : "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏";
        
        scanButton.setText(scanText);
        scanButton.setCallbackData("scan");
        scanRow.add(scanButton);
        keyboard.add(scanRow);
    }
    
    /**
     * Creates action buttons for Crewmates.
     * 
     * @param lobby The game lobby
     * @param player The player
     * @param keyboard The keyboard to add buttons to
     */
    private void createCrewmateKeyboard(GameLobby lobby, Player player, List<List<InlineKeyboardButton>> keyboard) {
        // Task buttons
        for (int i = 0; i < player.getTasks().size(); i++) {
            List<InlineKeyboardButton> taskRow = new ArrayList<>();
            InlineKeyboardButton taskButton = new InlineKeyboardButton();
            
            String taskName = player.getTasks().get(i).getName();
            boolean completed = player.getTasks().get(i).isCompleted();
            String status = completed ? "‚úÖ" : "üìã";
            
            taskButton.setText(status + " " + taskName);
            taskButton.setCallbackData("task:" + i);
            taskRow.add(taskButton);
            keyboard.add(taskRow);
        }
        
        // Add placeholder buttons that match the impostor UI structure
        // These are real task-like actions that crew can perform

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º –∏–¥–µ—Ç –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –º–∏—Ä–Ω—ã—Ö
        List<InlineKeyboardButton> checkRow = new ArrayList<>();
        InlineKeyboardButton checkButton = new InlineKeyboardButton();
        checkButton.setText("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã");
        checkButton.setCallbackData("check");
        checkRow.add(checkButton);
        keyboard.add(checkRow);
        
        // Scan button - show cooldown if applicable (—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–¥–µ—Ç –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –º–∏—Ä–Ω—ã—Ö)
        List<InlineKeyboardButton> scanRow = new ArrayList<>();
        InlineKeyboardButton scanButton = new InlineKeyboardButton();
        
        boolean scanOnCooldown = isScanOnCooldown(player.getUserId());
        String scanText = scanOnCooldown 
            ? "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏" 
            : "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏";
        
        scanButton.setText(scanText);
        scanButton.setCallbackData("scan");
        scanRow.add(scanButton);
        keyboard.add(scanRow);
    }
    
    /**
     * Checks if scan action is on cooldown for a player.
     * 
     * @param userId The user ID to check
     * @return True if scan is on cooldown, false otherwise
     */
    private boolean isScanOnCooldown(Long userId) {
        Long lastScanTime = lastScanTimeByPlayer.get(userId);
        if (lastScanTime == null) {
            return false;
        }
        
        long currentTime = System.currentTimeMillis();
        long timeSinceLastScan = currentTime - lastScanTime;
        return timeSinceLastScan < SCAN_COOLDOWN_MS;
    }
    
    /**
     * Gets remaining cooldown time in seconds.
     * 
     * @param userId The user ID to check
     * @return Remaining cooldown in seconds, or 0 if not on cooldown
     */
    private int getRemainingCooldownSeconds(Long userId) {
        Long lastScanTime = lastScanTimeByPlayer.get(userId);
        if (lastScanTime == null) {
            return 0;
        }
        
        long currentTime = System.currentTimeMillis();
        long timeSinceLastScan = currentTime - lastScanTime;
        
        if (timeSinceLastScan >= SCAN_COOLDOWN_MS) {
            return 0;
        }
        
        return (int)((SCAN_COOLDOWN_MS - timeSinceLastScan) / 1000);
    }
    
    /**
     * Creates common action buttons for all players.
     * 
     * @param keyboard The keyboard to add buttons to
     * @param lobby The game lobby to check for dead players
     * @param player The current player
     */
    private void createCommonActionButtons(List<List<InlineKeyboardButton>> keyboard, GameLobby lobby, Player player) {
        // Only alive players can perform these actions
        if (!player.isAlive()) {
            return; // Dead players don't get any common action buttons
        }
        
        // Report button - only for alive players
        List<InlineKeyboardButton> reportRow = new ArrayList<>();
        InlineKeyboardButton reportButton = new InlineKeyboardButton();
        reportButton.setText("‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ —Ç–µ–ª–µ");
        reportButton.setCallbackData("report_body");
        reportRow.add(reportButton);
        keyboard.add(reportRow);
        
        // Emergency meeting button - only for alive players
        List<InlineKeyboardButton> emergencyRow = new ArrayList<>();
        InlineKeyboardButton emergencyButton = new InlineKeyboardButton();
        emergencyButton.setText("üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ");
        emergencyButton.setCallbackData("emergency_meeting");
        emergencyRow.add(emergencyButton);
        keyboard.add(emergencyRow);
        
        // "I was killed" button - only for alive players
        List<InlineKeyboardButton> killedRow = new ArrayList<>();
        InlineKeyboardButton killedButton = new InlineKeyboardButton();
        killedButton.setText("üíÄ –ú–µ–Ω—è —É–±–∏–ª–∏");
        killedButton.setCallbackData("i_was_killed");
        killedRow.add(killedButton);
        keyboard.add(killedRow);
    }
    
    /**
     * Handles a task action from a player.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player performing the action
     * @param callbackData The callback data from the button
     */
    private void handleTaskAction(AmongUsBot bot, GameLobby lobby, Player player, String callbackData) {
        // Check if player is impostor
        if (player.isImpostor()) {
            if (player.getChatId() != null) {
                bot.sendTextMessage(player.getChatId(), "–ü—Ä–µ–¥–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è!");
            }
            return;
        }

        // Check if there's an active sabotage
        if (activeSabotage != SabotageType.NONE) {
            if (player.getChatId() != null) {
                bot.sendTextMessage(player.getChatId(), "–ù–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Å–∞–±–æ—Ç–∞–∂–∞!");
            }
            return;
        }

        try {
            // Parse task index from callback data
            int taskIndex = Integer.parseInt(callbackData.split(":")[1]);
            
            // Check if task exists and is not completed
            if (taskIndex >= 0 && taskIndex < player.getTotalTaskCount() && !player.isTaskCompleted(taskIndex)) {
                // Request photo confirmation for task
                player.setAwaitingPhotoForTaskIndex(taskIndex);
                
                if (player.getChatId() != null) {
                    Task task = player.getTask(taskIndex);
                    bot.sendTextMessage(player.getChatId(), 
                        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: \"" + 
                        task.getName() + "\"\n\n" + task.getDescription());
                }
                
                logger.info("Player {} requested to complete task {} in game {}, awaiting photo confirmation", 
                        player.getUserId(), taskIndex, lobby.getLobbyCode());
            } else {
                if (player.getChatId() != null) {
                    bot.sendTextMessage(player.getChatId(), "–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.");
                }
            }
        } catch (Exception e) {
            logger.error("Error handling task action for player {} in game {}: {}", 
                    player.getUserId(), lobby.getLobbyCode(), e.getMessage());
            if (player.getChatId() != null) {
                bot.sendTextMessage(player.getChatId(), "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è.");
            }
        }
    }
    
    /**
     * Shows a confirmation dialog to the player.
     * 
     * @param bot The bot instance
     * @param player The player to show the dialog to
     * @param confirmCallback The callback data for the confirm button
     * @param message The confirmation message to display
     */
    private void showConfirmationDialog(AmongUsBot bot, Player player, String confirmCallback, String message) {
        if (player.getChatId() == null) {
            logger.warn("Player {} has no chatId, cannot show confirmation dialog", player.getUserId());
            return;
        }
        
        SendMessage confirmMessage = new SendMessage();
        confirmMessage.setChatId(player.getChatId());
        confirmMessage.setText(message);
        
        // Create keyboard with confirm and cancel buttons
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // Confirm button
        List<InlineKeyboardButton> confirmRow = new ArrayList<>();
        InlineKeyboardButton confirmButton = new InlineKeyboardButton();
        confirmButton.setText("‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é");
        confirmButton.setCallbackData(confirmCallback);
        confirmRow.add(confirmButton);
        keyboard.add(confirmRow);
        
        // Cancel button
        List<InlineKeyboardButton> cancelRow = new ArrayList<>();
        InlineKeyboardButton cancelButton = new InlineKeyboardButton();
        cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∞");
        cancelButton.setCallbackData("confirmation_cancel");
        cancelRow.add(cancelButton);
        keyboard.add(cancelRow);
        
        keyboardMarkup.setKeyboard(keyboard);
        confirmMessage.setReplyMarkup(keyboardMarkup);
        
        bot.executeMethod(confirmMessage);
        logger.debug("Showed confirmation dialog to player {} for action {}", 
                player.getUserId(), confirmCallback);
    }
    
    /**
     * Handles cancel confirmation action.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player
     */
    private void handleCancelConfirmation(AmongUsBot bot, GameLobby lobby, Player player) {
        if (player.getChatId() == null) {
            logger.warn("Player {} has no chatId, cannot handle cancel confirmation", player.getUserId());
            return;
        }
        
        // Send a message that the action was cancelled
        bot.sendTextMessage(player.getChatId(), "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
        
        // Update the player's keyboard to return to the main menu
        updatePlayerActionKeyboard(bot, lobby, player);
        
        logger.debug("Player {} cancelled confirmation dialog", player.getUserId());
    }
    
    /**
     * Handles a confirmed report action from a player.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player who reported
     * @return The new game state if a report was successful, or null if not
     */
    private GameState handleReportActionConfirmed(AmongUsBot bot, GameLobby lobby, Player player) {
        // Check if there are any killed players to report (excluding ejected players)
        boolean hasKilledPlayers = lobby.getPlayerList().stream()
                .anyMatch(p -> p.wasKilled()); // Only allow reporting killed players, not ejected ones
                
        if (!hasKilledPlayers) {
            // No killed players to report
            String errorMessage = "–í—ã –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö —Ç–µ–ª. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä—É.";
            try {
                bot.sendTextMessage(player.getChatId(), errorMessage);
                // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º callback query ID, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                logger.info("Player {} attempted to report a body when there are no killed players in game {}", 
                        player.getUserId(), lobby.getLobbyCode());
            } catch (Exception e) {
                logger.error("Failed to send error message about no dead bodies", e);
            }
            return null;
        }
        
        // There are killed players, proceed with reporting
        String reportMessage = player.getUserName() + " —Å–æ–æ–±—â–∏–ª –æ —Ç–µ–ª–µ! –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ...";
        
        logger.info("Player {} reported a body in game {}", player.getUserId(), lobby.getLobbyCode());
        
        // Notify all players about the report
        for (Player p : lobby.getPlayerList()) {
            try {
                bot.sendTextMessage(p.getChatId(), reportMessage);
            } catch (Exception e) {
                logger.error("Failed to send report notification to player: " + p.getUserId(), e);
            }
        }
        
        // Create and return a new discussion state
        return new DiscussionState(player.getUserName(), player.getUserId());
    }
    
    /**
     * Handles a confirmed emergency meeting action.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player
     * @return The next game state or null to stay in current state
     */
    private GameState handleEmergencyMeetingActionConfirmed(AmongUsBot bot, GameLobby lobby, Player player) {
        String lobbyCode = lobby.getLobbyCode();
        
        // Thread-safe emergency meeting synchronization
        if (!emergencyMeetingInProgress.compareAndSet(false, true)) {
            // Another player already started an emergency meeting
            if (player.getChatId() != null) {
                bot.sendTextMessage(player.getChatId(), 
                        "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º!");
            }
            logger.info("Player {} attempted to call emergency meeting in game {} but another meeting is already in progress", 
                    player.getUserId(), lobbyCode);
            return null;
        }

        try {
            // Check if there's an active sabotage preventing emergency meetings
            if (activeSabotage != SabotageType.NONE) {
                if (player.getChatId() != null) {
                    String message = activeSabotage == SabotageType.LIGHTS 
                        ? "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º —Å–≤–µ—Ç–µ!"
                        : "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∞–≤–∞—Ä–∏–∏ —Ä–µ–∞–∫—Ç–æ—Ä–∞! –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏.";
                    bot.sendTextMessage(player.getChatId(), message);
                }
                return null;
            }

            // Check if player has reached the limit of emergency meetings
            int maxMeetings = lobby.getSettings().getEmergencyMeetings();
            if (player.hasReachedEmergencyMeetingLimit(maxMeetings)) {
                if (player.getChatId() != null) {
                    bot.sendTextMessage(player.getChatId(), 
                            "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω–∏—è (–ª–∏–º–∏—Ç: " + maxMeetings + ").");
                }
                logger.info("Player {} attempted to call an emergency meeting in game {} but has reached the limit", 
                        player.getUserId(), lobbyCode);
                return null;
            }

            // Increment the player's emergency meeting count
            player.incrementEmergencyMeetingsUsed();

            logger.info("Player {} called an emergency meeting in game {}", player.getUserId(), lobbyCode);

            // Notify all players
            for (Player p : lobby.getPlayerList()) {
                if (p.getChatId() == null) {
                    logger.warn("Player {} has no chatId, skipping emergency meeting notification", p.getUserId());
                    continue;
                }

                bot.sendTextMessage(p.getChatId(), 
                        player.getUserName() + " —Å–æ–∑–≤–∞–ª —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ! –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–µ...");
            }

            // Create and return a new discussion state
            return new DiscussionState(player.getUserName(), null);

        } finally {
            // Reset the meeting flag when exiting this state
            // Note: This is handled in onExit method when transitioning to DiscussionState
        }
    }
    
    /**
     * Handles a confirmed "I was killed" action.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player
     */
    private void handleIWasKilledActionConfirmed(AmongUsBot bot, GameLobby lobby, Player player) {
        if (!player.isAlive()) {
            if (player.getChatId() != null) {
                bot.sendTextMessage(player.getChatId(), "–í—ã —É–∂–µ –º–µ—Ä—Ç–≤—ã!");
            }
            return;
        }
        
        // Mark the player as dead
        player.kill();
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —É–±–∏–π—Å—Ç–≤–∞
        lobby.addGameEvent(player.getUserId(), "KILL", "–ë—ã–ª —É–±–∏—Ç");
        
        if (player.getChatId() != null) {
            bot.sendTextMessage(player.getChatId(), 
                    "–í—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ —É–±–∏—Ç—ã–π. –í—ã –≤—Å—ë –µ—â—ë –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö.");
        }
        
        logger.info("Player {} self-reported as killed in game {}", 
                player.getUserId(), lobby.getLobbyCode());
        
        // Update the player's keyboard to reflect their dead status
        updatePlayerActionKeyboard(bot, lobby, player);
        
        // Check win conditions
        checkAndUpdateWinConditions(bot, lobby);
    }
    
    /**
     * Handles a kill action from an impostor.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player performing the action
     * @param callbackData The callback data from the button
     */
    private void handleKillAction(AmongUsBot bot, GameLobby lobby, Player killer, String callbackData) {
        try {
            // Check if kill is on cooldown
            if (isKillOnCooldown(killer.getUserId(), lobby)) {
                if (killer.getChatId() != null) {
                    int remainingCooldown = getKillCooldownRemaining(killer.getUserId(), lobby);
                    bot.sendTextMessage(killer.getChatId(), 
                            "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É–±–∏–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ " + remainingCooldown + " —Å–µ–∫—É–Ω–¥.");
                }
                logger.debug("Player {} attempted to kill while on cooldown in game {}", 
                        killer.getUserId(), lobby.getLobbyCode());
                return;
            }
            
            // Extract the target user ID from the callback data
            long targetId = Long.parseLong(callbackData.split(":")[1]);
            Player target = lobby.getPlayer(targetId);
            
            if (target != null && target.isAlive() && !target.isImpostor()) {
                // Kill the target
                target.kill();
                
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —É–±–∏–π—Å—Ç–≤–∞
                lobby.addGameEvent(killer.getUserId(), "KILL", "–£–±–∏–ª " + target.getUserName());
                
                // Reset sabotage fix attempts if the killed player was fixing something
                if (playerFixingLights != null && playerFixingLights.equals(target.getUserId())) {
                    logger.info("Player {} was killed while fixing lights, resetting playerFixingLights", target.getUserId());
                    playerFixingLights = null;
                }
                
                if (playerAtReactorLocation1 != null && playerAtReactorLocation1.equals(target.getUserId())) {
                    logger.info("Player {} was killed while at reactor location 1, resetting playerAtReactorLocation1", target.getUserId());
                    playerAtReactorLocation1 = null;
                }
                
                if (playerAtReactorLocation2 != null && playerAtReactorLocation2.equals(target.getUserId())) {
                    logger.info("Player {} was killed while at reactor location 2, resetting playerAtReactorLocation2", target.getUserId());
                    playerAtReactorLocation2 = null;
                }
                
                // Set kill cooldown
                lastKillTimeByImpostor.put(killer.getUserId(), System.currentTimeMillis());
                
                logger.info("Player {} killed player {} in game {}", 
                        killer.getUserId(), target.getUserId(), lobby.getLobbyCode());
                
                // Notify the impostor
                if (killer.getChatId() != null) {
                    bot.sendTextMessage(killer.getChatId(), 
                            "–í—ã —É–±–∏–ª–∏ " + target.getUserName() + "!");
                } else {
                    logger.warn("Impostor {} has no chatId, cannot send kill confirmation", killer.getUserId());
                }
                
                // Notify the victim
                if (target.getChatId() != null) {
                    bot.sendTextMessage(target.getChatId(), 
                            "–í–∞—Å —É–±–∏–ª –ø—Ä–µ–¥–∞—Ç–µ–ª—å! –í—ã –≤—Å—ë –µ—â—ë –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö.");
                } else {
                    logger.warn("Victim {} has no chatId, cannot send death notification", target.getUserId());
                }
            } else {
                if (killer.getChatId() != null) {
                    bot.sendTextMessage(killer.getChatId(), "–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–ª—å –∏–ª–∏ —Ü–µ–ª—å —É–∂–µ –º–µ—Ä—Ç–≤–∞.");
                }
                logger.debug("Player {} attempted to kill invalid target {} in game {}", 
                        killer.getUserId(), targetId, lobby.getLobbyCode());
            }
        } catch (Exception e) {
            logger.error("Error handling kill action: {}", e.getMessage(), e);
        }
    }
    
    /**
     * Handles a fake task action from an impostor.
     * This makes it look like they're doing tasks.
     *
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player
     * @param callbackData The callback data
     */
    private void handleFakeTaskAction(AmongUsBot bot, GameLobby lobby, Player player, String callbackData) {
        if (!player.isImpostor()) {
            logger.warn("Non-impostor player {} attempted fake task in game {}", 
                    player.getUserId(), lobby.getLobbyCode());
            return;
        }
        
        if (player.getChatId() == null) {
            logger.warn("Player {} has no chatId, cannot send fake task message", player.getUserId());
            return;
        }
        
        try {
            // Check if lights are out - for consistency with normal tasks
            if (activeSabotage == SabotageType.LIGHTS) {
                bot.sendTextMessage(player.getChatId(), "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º —Å–≤–µ—Ç–µ! –°–Ω–∞—á–∞–ª–∞ –ø–æ—á–∏–Ω–∏—Ç–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ.");
                return;
            }
            
            int fakeTaskIndex = Integer.parseInt(callbackData.split(":")[1]);
            
            // Get the fake tasks for this impostor
            List<String> impostor_tasks = fakeTasksByImpostor.get(player.getUserId());
            List<Boolean> completionStatus = fakeTaskCompletionByImpostor.get(player.getUserId());
            
            if (impostor_tasks == null || completionStatus == null) {
                logger.warn("Impostor {} has no fake tasks assigned in game {}", 
                        player.getUserId(), lobby.getLobbyCode());
                return;
            }
            
            // Verify task index is valid
            if (fakeTaskIndex < 0 || fakeTaskIndex >= impostor_tasks.size()) {
                logger.warn("Impostor {} attempted to complete invalid fake task index {} in game {}", 
                        player.getUserId(), fakeTaskIndex, lobby.getLobbyCode());
                return;
            }
            
            // Check if the task is already completed
            if (completionStatus.get(fakeTaskIndex)) {
                bot.sendTextMessage(player.getChatId(), "–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.");
                logger.debug("Impostor {} attempted to complete already completed fake task {} in game {}", 
                        player.getUserId(), fakeTaskIndex, lobby.getLobbyCode());
                return;
            }
            
            String fakeTaskName = impostor_tasks.get(fakeTaskIndex);
            String taskDescription = getTaskDescription(fakeTaskName);
            
            // Set the fake task as awaiting photo confirmation
            player.setAwaitingPhotoForFakeTask(fakeTaskIndex);
            
            // Ask for a photo confirmation, just like with real tasks
            bot.sendTextMessage(player.getChatId(), 
                    "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: \"" + fakeTaskName + "\"\n\n" + taskDescription);
            
            logger.info("Impostor {} requested to fake-complete task {} in game {}, awaiting photo confirmation", 
                    player.getUserId(), fakeTaskIndex, lobby.getLobbyCode());
        } catch (Exception e) {
            logger.error("Error handling fake task action: {}", e.getMessage(), e);
        }
    }
    
    /**
     * Handles sabotage menu action.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player
     */
    private void handleSabotageMenuAction(AmongUsBot bot, GameLobby lobby, Player player) {
        if (!player.isImpostor()) {
            logger.warn("Non-impostor player {} attempted to open sabotage menu in game {}", 
                    player.getUserId(), lobby.getLobbyCode());
            return;
        }
        
        if (player.getChatId() == null) {
            logger.warn("Player {} has no chatId, cannot send sabotage menu", player.getUserId());
            return;
        }
        
        // Check if there's already an active sabotage
        if (activeSabotage != SabotageType.NONE) {
            bot.sendTextMessage(player.getChatId(), 
                    "–°–∞–±–æ—Ç–∞–∂ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.");
            return;
        }
        
        // Instead of sending a menu message, just update the player's keyboard with sabotage options
        sendSabotageMenu(bot, player);
        logger.info("Impostor {} opened sabotage menu in game {}", 
                player.getUserId(), lobby.getLobbyCode());
    }
    
    /**
     * Sends the sabotage menu to the player.
     * 
     * @param bot The bot instance
     * @param player The player to send the menu to
     */
    private void sendSabotageMenu(AmongUsBot bot, Player player) {
        SendMessage message = new SendMessage();
        message.setChatId(player.getChatId());
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–∞–±–æ—Ç–∞–∂–∞:");
        
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // Sabotage options
        String[] sabotageTypes = {"–°–≤–µ—Ç", "–†–µ–∞–∫—Ç–æ—Ä"};
        for (String type : sabotageTypes) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(type);
            button.setCallbackData("sabotage:" + (type.equals("–°–≤–µ—Ç") ? "lights" : "reactor"));
            row.add(button);
            keyboard.add(row);
        }
        
        // Back button
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–ù–∞–∑–∞–¥");
        backButton.setCallbackData("back_to_main");
        backRow.add(backButton);
        keyboard.add(backRow);
        
        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);
        
        // Send the message and store its ID for later deletion
        Message sentMessage = bot.executeMethod(message);
        if (sentMessage != null) {
            sabotageMenuMessageIds.put(player.getUserId(), sentMessage.getMessageId());
            logger.debug("Stored sabotage menu message ID {} for player {}", 
                    sentMessage.getMessageId(), player.getUserId());
        }
    }
    
    /**
     * Handles specific sabotage selection.
     *
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player
     * @param callbackData The callback data
     */
    private void handleSpecificSabotage(AmongUsBot bot, GameLobby lobby, Player player, String callbackData) {
        if (!player.isImpostor()) {
            logger.warn("Non-impostor player {} attempted to sabotage in game {}", 
                    player.getUserId(), lobby.getLobbyCode());
            return;
        }
        
        if (activeSabotage != SabotageType.NONE) {
            if (player.getChatId() != null) {
                bot.sendTextMessage(player.getChatId(), "–°–∞–±–æ—Ç–∞–∂ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.");
            }
            return;
        }
        
        // Delete the sabotage menu message if we have its ID
        Integer menuMessageId = sabotageMenuMessageIds.get(player.getUserId());
        if (menuMessageId != null && player.getChatId() != null) {
            boolean deleted = bot.deleteMessage(player.getChatId(), menuMessageId);
            if (deleted) {
                sabotageMenuMessageIds.remove(player.getUserId());
                logger.debug("Deleted sabotage menu message {} for player {}", 
                        menuMessageId, player.getUserId());
            }
        }
        
        String sabotageType = callbackData.split(":")[1];
        
        // Directly activate the sabotage without sending additional messages
        // When we activate a sabotage, it will send notifications to all players
        switch (sabotageType) {
            case "lights":
                activateLightsSabotage(bot, lobby, player);
                break;
            case "reactor":
                activateReactorSabotage(bot, lobby, player);
                break;
            default:
                logger.warn("Unknown sabotage type: {}", sabotageType);
                if (player.getChatId() != null) {
                    updatePlayerActionKeyboard(bot, lobby, player); // Return to main menu
                }
                break;
        }
    }
    
    /**
     * Activates lights sabotage.
     *
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player who activated the sabotage
     */
    private void activateLightsSabotage(AmongUsBot bot, GameLobby lobby, Player player) {
        activeSabotage = SabotageType.LIGHTS;
        playerFixingLights = null;
        
        // Notify all players
        for (Player p : lobby.getPlayerList()) {
            if (p.getChatId() != null) {
                SendMessage message = new SendMessage();
                message.setChatId(p.getChatId());
                
                // Send the same message to everyone including impostors
                message.setText("‚ö†Ô∏è –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –°–≤–µ—Ç –ø–æ–≥–∞—Å! –ó–∞–¥–∞–Ω–∏—è, —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–æ –ø–æ—á–∏–Ω–∫–∏ —Å–≤–µ—Ç–∞.");
                
                // Add a button to fix lights for all players
                InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
                
                List<InlineKeyboardButton> fixRow = new ArrayList<>();
                InlineKeyboardButton fixButton = new InlineKeyboardButton();
                fixButton.setText("–ü–æ—á–∏–Ω–∏—Ç—å —Å–≤–µ—Ç");
                fixButton.setCallbackData("fix_lights");
                fixRow.add(fixButton);
                keyboard.add(fixRow);
                
                keyboardMarkup.setKeyboard(keyboard);
                message.setReplyMarkup(keyboardMarkup);
                
                bot.executeMethod(message);
            }
        }
        
        logger.info("Player {} activated lights sabotage in lobby {}", player.getUserId(), lobby.getLobbyCode());
    }
    
    /**
     * Activates reactor sabotage.
     *
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player who activated the sabotage
     */
    private void activateReactorSabotage(AmongUsBot bot, GameLobby lobby, Player player) {
        activeSabotage = SabotageType.REACTOR;
        reactorSabotageStartTime = System.currentTimeMillis();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π –∏ —Ñ–ª–∞–≥–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        playerAtReactorLocation1 = null;
        playerAtReactorLocation2 = null;
        photoReceivedFromLocation1 = false;
        photoReceivedFromLocation2 = false;
        
        logger.info("Player {} activated reactor sabotage in game {}", 
                player.getUserId(), lobby.getLobbyCode());
        
        // Remove the sabotage menu message
        Integer messageId = sabotageMenuMessageIds.remove(player.getUserId());
        if (messageId != null && player.getChatId() != null) {
            try {
                DeleteMessage deleteMessage = new DeleteMessage();
                deleteMessage.setChatId(player.getChatId());
                deleteMessage.setMessageId(messageId);
                bot.execute(deleteMessage);
            } catch (Exception e) {
                logger.debug("Could not delete sabotage menu message for player {}: {}", 
                        player.getUserId(), e.getMessage());
            }
        }
        
        // Notify all players about the reactor sabotage and provide fix buttons
        for (Player p : lobby.getPlayerList()) {
            if (p.getChatId() == null) {
                logger.warn("Player {} has no chatId, skipping reactor sabotage notification", p.getUserId());
                continue;
            }
            
            SendMessage message = new SendMessage();
            message.setChatId(p.getChatId());
            message.setText("üî¥ –ê–í–ê–†–ò–Ø –†–ï–ê–ö–¢–û–†–ê! –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –≤ –¥–≤—É—Ö –ª–æ–∫–∞—Ü–∏—è—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –∏–Ω–∞—á–µ –ø—Ä–µ–¥–∞—Ç–µ–ª–∏ –ø–æ–±–µ–¥—è—Ç —á–µ—Ä–µ–∑ 90 —Å–µ–∫—É–Ω–¥!");
            
            // Add buttons to fix reactor at both locations
            InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            
            List<InlineKeyboardButton> reactorRow1 = new ArrayList<>();
            InlineKeyboardButton reactorLocation1Button = new InlineKeyboardButton();
            reactorLocation1Button.setText("–ü—É–Ω–∫—Ç 1 —Ä–µ–∞–∫—Ç–æ—Ä–∞");
            reactorLocation1Button.setCallbackData("reactor_location1");
            reactorRow1.add(reactorLocation1Button);
            keyboard.add(reactorRow1);
            
            List<InlineKeyboardButton> reactorRow2 = new ArrayList<>();
            InlineKeyboardButton reactorLocation2Button = new InlineKeyboardButton();
            reactorLocation2Button.setText("–ü—É–Ω–∫—Ç 2 —Ä–µ–∞–∫—Ç–æ—Ä–∞");
            reactorLocation2Button.setCallbackData("reactor_location2");
            reactorRow2.add(reactorLocation2Button);
            keyboard.add(reactorRow2);
            
            keyboardMarkup.setKeyboard(keyboard);
            message.setReplyMarkup(keyboardMarkup);
            
            bot.executeMethod(message);
        }
        
        // Start reactor meltdown timer using ScheduledExecutorService
        reactorMeltdownTimer = scheduler.schedule(() -> {
            try {
                logger.info("Reactor meltdown timer expired in game {}, checking if sabotage is still active", lobby.getLobbyCode());
                
                // Check if the sabotage is still active
                if (activeSabotage == SabotageType.REACTOR) {
                    logger.info("Reactor sabotage not fixed in time, impostors win in game {}", lobby.getLobbyCode());
                    
                    // Notify all players that impostors won due to reactor meltdown
                    for (Player p : lobby.getPlayerList()) {
                        if (p.getChatId() != null) {
                            bot.sendTextMessage(p.getChatId(), 
                                    "üí• –†–µ–∞–∫—Ç–æ—Ä –≤–∑–æ—Ä–≤–∞–ª—Å—è! –ü—Ä–µ–¥–∞—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏!");
                        }
                    }
                    
                    // Transition to game over state
                    GameOverState gameOverState = new GameOverState("–ü—Ä–µ–¥–∞—Ç–µ–ª–∏", "–†–µ–∞–∫—Ç–æ—Ä –≤–∑–æ—Ä–≤–∞–ª—Å—è!");
                    lobby.setGameState(gameOverState);
                    gameOverState.onEnter(bot, lobby);
                }
            } catch (Exception e) {
                logger.error("Error in reactor meltdown timer for game {}", lobby.getLobbyCode(), e);
            }
        }, REACTOR_MELTDOWN_TIME_MS, java.util.concurrent.TimeUnit.MILLISECONDS);
    }
    
    /**
     * Handles scan action for crew members.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player
     */
    private void handleScanAction(AmongUsBot bot, GameLobby lobby, Player player) {
        if (player.getChatId() == null) {
            logger.warn("Player {} has no chatId, cannot send scan results", player.getUserId());
            return;
        }
        
        // Check if lights are out
        if (activeSabotage == SabotageType.LIGHTS && !player.isImpostor()) {
            bot.sendTextMessage(player.getChatId(), "–°–∫–∞–Ω–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º —Å–≤–µ—Ç–µ!");
            return;
        }
        
        // Check if scan is on cooldown
        if (isScanOnCooldown(player.getUserId())) {
            int remainingSeconds = getRemainingCooldownSeconds(player.getUserId());
            bot.sendTextMessage(player.getChatId(), 
                    "–°–∫–∞–Ω–µ—Ä –≤—Å—ë –µ—â—ë –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ " + remainingSeconds + " —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.");
            logger.debug("Player {} attempted to use scanner while on cooldown in game {}", 
                    player.getUserId(), lobby.getLobbyCode());
            return;
        }
        
        // Get some game statistics
        int totalPlayers = lobby.getPlayerCount();
        int alivePlayers = 0;
        int completedTasks = 0;
        int totalTasks = 0;
        
        for (Player p : lobby.getPlayerList()) {
            if (p.isAlive()) {
                alivePlayers++;
            }
            
            if (!p.isImpostor()) {
                completedTasks += p.getCompletedTaskCount();
                totalTasks += p.getTotalTaskCount();
            }
        }
        
        int taskCompletionPercent = totalTasks > 0 ? (completedTasks * 100 / totalTasks) : 0;
        
        StringBuilder message = new StringBuilder();
        message.append("*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n");
        message.append("üë• –ò–≥—Ä–æ–∫–∏: ").append(alivePlayers).append(" –∂–∏–≤—ã—Ö / ").append(totalPlayers).append(" –≤—Å–µ–≥–æ\n");
        message.append("üìã –ó–∞–¥–∞–Ω–∏—è: ").append(completedTasks).append(" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ / ").append(totalTasks).append(" –≤—Å–µ–≥–æ (").append(taskCompletionPercent).append("%)\n");
        message.append("\n–ê–Ω–æ–º–∞–ª–∏–π –≤ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.");
        
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(player.getChatId());
        sendMessage.setText(message.toString());
        sendMessage.setParseMode("Markdown");
        
        bot.executeMethod(sendMessage);
        logger.info("Player {} performed scan in game {}", 
                player.getUserId(), lobby.getLobbyCode());
        
        // Update the last scan time
        lastScanTimeByPlayer.put(player.getUserId(), System.currentTimeMillis());
        
        // Update the player's keyboard to reflect the new cooldown status
        updatePlayerActionKeyboard(bot, lobby, player);
    }
    
    /**
     * Handles check action for crew members.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player
     */
    private void handleCheckAction(AmongUsBot bot, GameLobby lobby, Player player) {
        if (player.getChatId() == null) {
            logger.warn("Player {} has no chatId, cannot send check results", player.getUserId());
            return;
        }
        
        // –î–ª—è –ø—Ä–µ–¥–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–µ–Ω—é —Å–∞–±–æ—Ç–∞–∂–∞
        if (player.isImpostor()) {
            handleSabotageMenuAction(bot, lobby, player);
            return;
        }
        
        // –î–ª—è —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏—è—Ö
        StringBuilder message = new StringBuilder();
        message.append("*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã:*\n\n");
        message.append("*–ü—Ä–æ–≥—Ä–µ—Å—Å –≤–∞—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π:*\n");
        message.append("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ").append(player.getCompletedTaskCount()).append(" / ").append(player.getTotalTaskCount()).append(" –∑–∞–¥–∞–Ω–∏–π\n");
        message.append("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ").append(player.getTaskCompletionPercentage()).append("%\n\n");
        
        if (player.getCompletedTaskCount() < player.getTotalTaskCount()) {
            message.append("*–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞–Ω–∏—è:*\n");
            List<Task> tasks = player.getTasks();
            for (int i = 0; i < tasks.size(); i++) {
                Task task = tasks.get(i);
                if (!task.isCompleted()) {
                    message.append("- ").append(task.getName()).append("\n");
                }
            }
        } else {
            message.append("–í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!");
        }
        
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(player.getChatId());
        sendMessage.setText(message.toString());
        sendMessage.setParseMode("Markdown");
        
        bot.executeMethod(sendMessage);
        logger.info("Player {} performed system check in game {}", 
                player.getUserId(), lobby.getLobbyCode());
    }
    
    /**
     * Handles fix lights action.
     *
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player
     */
    private void handleFixLightsAction(AmongUsBot bot, GameLobby lobby, Player player) {
        if (activeSabotage != SabotageType.LIGHTS) {
            if (player.getChatId() != null) {
                bot.sendTextMessage(player.getChatId(), "–°–≤–µ—Ç —Å–µ–π—á–∞—Å –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω.");
            }
            return;
        }
        
        // Allow impostors to fix lights too - removed impostor check
        
        if (playerFixingLights != null) {
            if (player.getChatId() != null) {
                bot.sendTextMessage(player.getChatId(), 
                        "–î—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫ —É–∂–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ—á–∏–Ω–∏—Ç—å —Å–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.");
            }
            return;
        }
        
        playerFixingLights = player.getUserId();
        
        if (player.getChatId() != null) {
            bot.sendTextMessage(player.getChatId(), 
                    "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ, —á—Ç–æ –≤—ã —á–∏–Ω–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ—â–∏—Ç.");
        }
        
        logger.info("Player {} is attempting to fix lights in game {}", 
                player.getUserId(), lobby.getLobbyCode());
    }
    
    /**
     * Handles reactor location 1 action.
     *
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player
     */
    private void handleReactorLocation1Action(AmongUsBot bot, GameLobby lobby, Player player) {
        if (activeSabotage != SabotageType.REACTOR) {
            if (player.getChatId() != null) {
                bot.sendTextMessage(player.getChatId(), "–†–µ–∞–∫—Ç–æ—Ä —Å–µ–π—á–∞—Å –Ω–µ –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.");
            }
            return;
        }
        
        // Allow impostors to fix reactor too - removed impostor check
        
        if (playerAtReactorLocation1 != null) {
            if (player.getChatId() != null) {
                bot.sendTextMessage(player.getChatId(), 
                        "–î—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É –ü—É–Ω–∫—Ç–∞ 1. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–¥–∏—Ç–µ –∫ –ü—É–Ω–∫—Ç—É 2.");
            }
            return;
        }
        
        // Cannot be at both locations
        if (playerAtReactorLocation2 != null && playerAtReactorLocation2.equals(player.getUserId())) {
            if (player.getChatId() != null) {
                bot.sendTextMessage(player.getChatId(), "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –¥–≤—É—Ö –º–µ—Å—Ç–∞—Ö!");
            }
            return;
        }
        
        playerAtReactorLocation1 = player.getUserId();
        
        if (player.getChatId() != null) {
            bot.sendTextMessage(player.getChatId(), 
                    "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —É –ü—É–Ω–∫—Ç–∞ 1 —Ä–µ–∞–∫—Ç–æ—Ä–∞.\n\n‚ö†Ô∏è –í–ê–ñ–ù–û: –î–ª—è –ø–æ—á–∏–Ω–∫–∏ —Ä–µ–∞–∫—Ç–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –û–ë–ï–ò–• –ª–æ–∫–∞—Ü–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!");
        }
        
        // Notify all players about progress
        for (Player p : lobby.getPlayerList()) {
            if (p.getChatId() != null && !p.getUserId().equals(player.getUserId())) {
                bot.sendTextMessage(p.getChatId(), player.getUserName() + " –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É –ü—É–Ω–∫—Ç–∞ 1 —Ä–µ–∞–∫—Ç–æ—Ä–∞ –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ!");
            }
        }
        
        logger.info("Player {} is at reactor location 1 in game {}", 
                player.getUserId(), lobby.getLobbyCode());
    }
    
    /**
     * Handles reactor location 2 action.
     *
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player
     */
    private void handleReactorLocation2Action(AmongUsBot bot, GameLobby lobby, Player player) {
        if (activeSabotage != SabotageType.REACTOR) {
            if (player.getChatId() != null) {
                bot.sendTextMessage(player.getChatId(), "–†–µ–∞–∫—Ç–æ—Ä —Å–µ–π—á–∞—Å –Ω–µ –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.");
            }
            return;
        }
        
        // Allow impostors to fix reactor too - removed impostor check
        
        if (playerAtReactorLocation2 != null) {
            if (player.getChatId() != null) {
                bot.sendTextMessage(player.getChatId(), 
                        "–î—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É –ü—É–Ω–∫—Ç–∞ 2. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–¥–∏—Ç–µ –∫ –ü—É–Ω–∫—Ç—É 1.");
            }
            return;
        }
        
        // Cannot be at both locations
        if (playerAtReactorLocation1 != null && playerAtReactorLocation1.equals(player.getUserId())) {
            if (player.getChatId() != null) {
                bot.sendTextMessage(player.getChatId(), "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –¥–≤—É—Ö –º–µ—Å—Ç–∞—Ö!");
            }
            return;
        }
        
        playerAtReactorLocation2 = player.getUserId();
        
        if (player.getChatId() != null) {
            bot.sendTextMessage(player.getChatId(), 
                    "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —É –ü—É–Ω–∫—Ç–∞ 2 —Ä–µ–∞–∫—Ç–æ—Ä–∞.\n\n‚ö†Ô∏è –í–ê–ñ–ù–û: –î–ª—è –ø–æ—á–∏–Ω–∫–∏ —Ä–µ–∞–∫—Ç–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –û–ë–ï–ò–• –ª–æ–∫–∞—Ü–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!");
        }
        
        // Notify all players about progress
        for (Player p : lobby.getPlayerList()) {
            if (p.getChatId() != null && !p.getUserId().equals(player.getUserId())) {
                bot.sendTextMessage(p.getChatId(), player.getUserName() + " –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É –ü—É–Ω–∫—Ç–∞ 2 —Ä–µ–∞–∫—Ç–æ—Ä–∞ –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ!");
            }
        }
        
        logger.info("Player {} is at reactor location 2 in game {}", 
                player.getUserId(), lobby.getLobbyCode());
    }
    
    /**
     * Checks if any win conditions have been met.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     * @return The next game state if a win condition is met, null otherwise
     */
    private GameState checkWinConditions(AmongUsBot bot, GameLobby lobby) {
        List<Player> players = lobby.getPlayerList();
        int aliveCrewmates = 0;
        int aliveImpostors = 0;
        int taskCompletionPercent = 0;
        int crewmateCount = 0;
        
        // Count alive players and calculate task completion
        for (Player player : players) {
            if (player.isAlive()) {
                if (player.isImpostor()) {
                    aliveImpostors++;
                } else {
                    aliveCrewmates++;
                }
            }
            
            if (!player.isImpostor()) {
                taskCompletionPercent += player.getTaskCompletionPercentage();
                crewmateCount++;
            }
        }
        
        // Calculate average task completion
        taskCompletionPercent = crewmateCount > 0 ? taskCompletionPercent / crewmateCount : 0;
        
        logger.debug("Game {} win condition check: {} alive crewmates, {} alive impostors, {}% tasks completed", 
                lobby.getLobbyCode(), aliveCrewmates, aliveImpostors, taskCompletionPercent);
        
        // Check win conditions
        if (aliveImpostors == 0) {
            // All impostors are dead - Crewmates win
            logger.info("Game {} ended: Crewmates win (all impostors ejected)", lobby.getLobbyCode());
            return new GameOverState("–ß–ª–µ–Ω—ã —ç–∫–∏–ø–∞–∂–∞", "–í—Å–µ –ø—Ä–µ–¥–∞—Ç–µ–ª–∏ –±—ã–ª–∏ –≤—ã–±—Ä–æ—à–µ–Ω—ã —Å –∫–æ—Ä–∞–±–ª—è!");
        } else if (aliveImpostors >= aliveCrewmates) {
            // Equal or more impostors than crewmates - Impostors win
            logger.info("Game {} ended: Impostors win (not enough crewmates left)", lobby.getLobbyCode());
            return new GameOverState("–ü—Ä–µ–¥–∞—Ç–µ–ª–∏", "–ü—Ä–µ–¥–∞—Ç–µ–ª–∏ —É—Å—Ç—Ä–∞–Ω–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞!");
        } else if (taskCompletionPercent >= 100) {
            // All tasks completed - Crewmates win
            logger.info("Game {} ended: Crewmates win (all tasks completed)", lobby.getLobbyCode());
            return new GameOverState("–ß–ª–µ–Ω—ã —ç–∫–∏–ø–∞–∂–∞", "–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!");
        }
        
        // No win condition met
        return null;
    }
    
    /**
     * Updates the action keyboard for a player.
     * This is called after task completion to refresh the available actions.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player to update
     */
    public void updatePlayerActionKeyboard(AmongUsBot bot, GameLobby lobby, Player player) {
        if (player.getChatId() == null) {
            logger.warn("Player {} has no chatId, cannot update action keyboard", player.getUserId());
            return;
        }
        
        SendMessage message = new SendMessage();
        message.setChatId(player.getChatId());
        
        // Use correct progress calculation for impostors vs crewmates
        int progressPercent;
        if (player.isImpostor()) {
            progressPercent = getFakeTaskCompletionPercentage(player.getUserId());
        } else {
            progressPercent = player.getTaskCompletionPercentage();
        }
        
        message.setText("–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≥—Ä–µ—Å—Å: " + progressPercent + "%");
        message.setReplyMarkup(createActionKeyboard(lobby, player));
        
        bot.executeMethod(message);
        logger.debug("Updated action keyboard for player {} in game {}", 
                player.getUserId(), lobby.getLobbyCode());
    }
    
    /**
     * Checks win conditions and updates game state if needed.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     */
    public void checkAndUpdateWinConditions(AmongUsBot bot, GameLobby lobby) {
        GameState nextState = checkWinConditions(bot, lobby);
        if (nextState != null) {
            // A win condition has been met, transition to the new state
            lobby.setGameState(nextState);
            nextState.onEnter(bot, lobby);
            logger.info("Game {} transitioned to {} after win condition check", 
                    lobby.getLobbyCode(), nextState.getStateName());
        }
    }
    
    /**
     * Checks if a player is currently trying to fix the lights.
     * 
     * @param userId The player ID to check
     * @return True if this player is fixing lights
     */
    public boolean isPlayerFixingLights(Long userId) {
        return activeSabotage == SabotageType.LIGHTS && 
               playerFixingLights != null && 
               playerFixingLights.equals(userId);
    }
    
    /**
     * Checks if a player is at either reactor location.
     * 
     * @param userId The player ID to check
     * @return True if this player is at a reactor location
     */
    public boolean isPlayerAtReactorLocation(Long userId) {
        return activeSabotage == SabotageType.REACTOR && 
               ((playerAtReactorLocation1 != null && playerAtReactorLocation1.equals(userId)) || 
                (playerAtReactorLocation2 != null && playerAtReactorLocation2.equals(userId)));
    }
    
    /**
     * Confirms and processes a lights fix.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player who fixed the lights
     */
    public void confirmLightsFix(AmongUsBot bot, GameLobby lobby, Player player) {
        // Reset sabotage state
        activeSabotage = SabotageType.NONE;
        playerFixingLights = null;
        
        // Notify all players
        for (Player p : lobby.getPlayerList()) {
            if (p.getChatId() != null) {
                bot.sendTextMessage(p.getChatId(), 
                        "üí° –°–≤–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! " + player.getUserName() + " –ø–æ—á–∏–Ω–∏–ª –æ—Å–≤–µ—â–µ–Ω–∏–µ.");
            }
        }
        
        // Update action keyboards for all players
        for (Player p : lobby.getPlayerList()) {
            updatePlayerActionKeyboard(bot, lobby, p);
        }
        
        logger.info("Player {} fixed lights sabotage in game {}", 
                player.getUserId(), lobby.getLobbyCode());
    }
    
    /**
     * Confirms that the reactor fix has been completed by having players at both locations.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player who triggered the fix
     */
    public void confirmReactorFix(AmongUsBot bot, GameLobby lobby, Player player) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫
        boolean isAtLocation1 = playerAtReactorLocation1 != null && playerAtReactorLocation1.equals(player.getUserId());
        boolean isAtLocation2 = playerAtReactorLocation2 != null && playerAtReactorLocation2.equals(player.getUserId());
        
        if (!isAtLocation1 && !isAtLocation2) {
            logger.warn("Player {} tried to confirm reactor fix but is not at any reactor location", player.getUserId());
            return;
        }
        
        // –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
        if (isAtLocation1) {
            photoReceivedFromLocation1 = true;
            logger.info("Photo received from reactor location 1 by player {} in game {}", 
                    player.getUserId(), lobby.getLobbyCode());
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            for (Player p : lobby.getPlayerList()) {
                if (p.getChatId() != null) {
                    bot.sendTextMessage(p.getChatId(), 
                            "üì∏ " + player.getUserName() + " –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ —Å –ü—É–Ω–∫—Ç–∞ 1 —Ä–µ–∞–∫—Ç–æ—Ä–∞! " +
                            (photoReceivedFromLocation2 ? "–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –ü—É–Ω–∫—Ç–∞ 2..." : "–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ —Å –ü—É–Ω–∫—Ç–∞ 2!"));
                }
            }
        } else if (isAtLocation2) {
            photoReceivedFromLocation2 = true;
            logger.info("Photo received from reactor location 2 by player {} in game {}", 
                    player.getUserId(), lobby.getLobbyCode());
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            for (Player p : lobby.getPlayerList()) {
                if (p.getChatId() != null) {
                    bot.sendTextMessage(p.getChatId(), 
                            "üì∏ " + player.getUserName() + " –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ —Å –ü—É–Ω–∫—Ç–∞ 2 —Ä–µ–∞–∫—Ç–æ—Ä–∞! " +
                            (photoReceivedFromLocation1 ? "–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –ü—É–Ω–∫—Ç–∞ 1..." : "–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ —Å –ü—É–Ω–∫—Ç–∞ 1!"));
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω—ã –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –æ–±–µ–∏—Ö –ª–æ–∫–∞—Ü–∏–π
        if (photoReceivedFromLocation1 && photoReceivedFromLocation2) {
            // –†–µ–∞–∫—Ç–æ—Ä –ø–æ—á–∏–Ω–µ–Ω! –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–µ—Ä –º–µ–ª—Ç–¥–∞—É–Ω–∞
            if (reactorMeltdownTimer != null && !reactorMeltdownTimer.isDone()) {
                reactorMeltdownTimer.cancel(true);
                reactorMeltdownTimer = null;
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–±–æ—Ç–∞–∂–∞
            activeSabotage = SabotageType.NONE;
            playerAtReactorLocation1 = null;
            playerAtReactorLocation2 = null;
            photoReceivedFromLocation1 = false;
            photoReceivedFromLocation2 = false;
            reactorSabotageStartTime = null;
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ—á–∏–Ω–∫–µ
            for (Player p : lobby.getPlayerList()) {
                if (p.getChatId() != null) {
                    bot.sendTextMessage(p.getChatId(), 
                            "‚úÖ –ê–í–ê–†–ò–Ø –£–°–¢–†–ê–ù–ï–ù–ê! –†–µ–∞–∫—Ç–æ—Ä —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã–º —É—Å–∏–ª–∏—è–º –∫–æ–º–∞–Ω–¥—ã! üéâ");
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            for (Player p : lobby.getPlayerList()) {
                updatePlayerActionKeyboard(bot, lobby, p);
            }
            
            logger.info("Reactor sabotage successfully fixed in game {} with photos from both locations", 
                    lobby.getLobbyCode());
        } else {
            // –†–µ–∞–∫—Ç–æ—Ä –µ—â–µ –Ω–µ –ø–æ—á–∏–Ω–µ–Ω, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ
            if (player.getChatId() != null) {
                String remainingLocation = isAtLocation1 ? "–ü—É–Ω–∫—Ç–∞ 2" : "–ü—É–Ω–∫—Ç–∞ 1";
                bot.sendTextMessage(player.getChatId(), 
                        "‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ —Å " + remainingLocation + " —Ä–µ–∞–∫—Ç–æ—Ä–∞.");
            }
        }
    }
    
    /**
     * Checks if kill action is on cooldown for a player.
     * 
     * @param userId The user ID to check
     * @param lobby The game lobby for settings
     * @return True if kill is on cooldown, false otherwise
     */
    private boolean isKillOnCooldown(Long userId, GameLobby lobby) {
        Long lastKillTime = lastKillTimeByImpostor.get(userId);
        if (lastKillTime == null) {
            return false;
        }
        
        long currentTime = System.currentTimeMillis();
        long timeSinceLastKill = currentTime - lastKillTime;
        long killCooldownMs = lobby.getSettings().getKillCooldown() * 1000L;
        
        return timeSinceLastKill < killCooldownMs;
    }
    
    /**
     * Gets remaining kill cooldown time in seconds.
     * 
     * @param userId The user ID to check
     * @param lobby The game lobby for settings
     * @return Remaining cooldown in seconds, or 0 if not on cooldown
     */
    private int getKillCooldownRemaining(Long userId, GameLobby lobby) {
        Long lastKillTime = lastKillTimeByImpostor.get(userId);
        if (lastKillTime == null) {
            return 0;
        }
        
        long currentTime = System.currentTimeMillis();
        long timeSinceLastKill = currentTime - lastKillTime;
        long killCooldownMs = lobby.getSettings().getKillCooldown() * 1000L;
        
        if (timeSinceLastKill >= killCooldownMs) {
            return 0;
        }
        
        return (int)((killCooldownMs - timeSinceLastKill) / 1000);
    }
    
    /**
     * Handles kill cooldown notification.
     * 
     * @param bot The bot instance
     * @param lobby The game lobby
     * @param player The player
     */
    private void handleKillCooldownAction(AmongUsBot bot, GameLobby lobby, Player player) {
        if (!player.isImpostor()) {
            logger.warn("Non-impostor player {} attempted to check kill cooldown in game {}", 
                    player.getUserId(), lobby.getLobbyCode());
            return;
        }
        
        if (player.getChatId() == null) {
            logger.warn("Player {} has no chatId, cannot send cooldown message", player.getUserId());
            return;
        }
        
        int remainingCooldown = getKillCooldownRemaining(player.getUserId(), lobby);
        String message;
        
        if (remainingCooldown > 0) {
            message = "–í–∞—à–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É–±–∏–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ " + remainingCooldown + 
                    " —Å–µ–∫—É–Ω–¥, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–±–∏—Ç—å —Å–Ω–æ–≤–∞.";
        } else {
            message = "–í–∞—à–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —É–±–∏–π—Å—Ç–≤–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!";
            // Update the keyboard since cooldown might have expired
            updatePlayerActionKeyboard(bot, lobby, player);
        }
        
        bot.sendTextMessage(player.getChatId(), message);
        logger.debug("Sent kill cooldown status to player {} in game {}: {} seconds remaining", 
                player.getUserId(), lobby.getLobbyCode(), remainingCooldown);
    }
    
    /**
     * Mark a fake task as completed for an impostor.
     * 
     * @param userId The impostor's user ID
     * @param fakeTaskIndex The index of the fake task to mark as completed
     * @return True if successfully marked as completed, false otherwise
     */
    public boolean completeFakeTask(Long userId, Integer fakeTaskIndex) {
        List<Boolean> completionStatus = fakeTaskCompletionByImpostor.get(userId);
        if (completionStatus == null || fakeTaskIndex < 0 || fakeTaskIndex >= completionStatus.size()) {
            return false;
        }
        
        if (!completionStatus.get(fakeTaskIndex)) {
            completionStatus.set(fakeTaskIndex, true);
            return true;
        }
        
        return false;
    }
    
    /**
     * Gets the name of a fake task for an impostor.
     * 
     * @param userId The impostor's user ID
     * @param fakeTaskIndex The index of the fake task
     * @return The name of the fake task, or null if not found
     */
    public String getFakeTaskName(Long userId, Integer fakeTaskIndex) {
        List<String> impostor_tasks = fakeTasksByImpostor.get(userId);
        if (impostor_tasks == null || fakeTaskIndex < 0 || fakeTaskIndex >= impostor_tasks.size()) {
            return null;
        }
        
        return impostor_tasks.get(fakeTaskIndex);
    }
    
    /**
     * Gets the number of completed fake tasks for an impostor.
     * 
     * @param userId The impostor's user ID
     * @return The number of completed fake tasks
     */
    public int getCompletedFakeTaskCount(Long userId) {
        List<Boolean> completionStatus = fakeTaskCompletionByImpostor.get(userId);
        if (completionStatus == null) {
            return 0;
        }
        
        int count = 0;
        for (Boolean completed : completionStatus) {
            if (completed) {
                count++;
            }
        }
        
        return count;
    }
    
    /**
     * Gets the total number of fake tasks for an impostor.
     * 
     * @param userId The impostor's user ID
     * @return The total number of fake tasks
     */
    public int getTotalFakeTaskCount(Long userId) {
        List<String> impostor_tasks = fakeTasksByImpostor.get(userId);
        return impostor_tasks != null ? impostor_tasks.size() : 0;
    }
    
    /**
     * Gets the fake task completion percentage for an impostor.
     * 
     * @param userId The impostor's user ID
     * @return The completion percentage (0-100)
     */
    public int getFakeTaskCompletionPercentage(Long userId) {
        List<Boolean> completionStatus = fakeTaskCompletionByImpostor.get(userId);
        if (completionStatus == null || completionStatus.isEmpty()) {
            return 0;
        }
        
        int completedCount = 0;
        for (Boolean completed : completionStatus) {
            if (completed) {
                completedCount++;
            }
        }
        
        return (int) Math.round((double) completedCount / completionStatus.size() * 100);
    }
    
    /**
     * Handles "back to main" button in sabotage menu
     */
    private void handleBackToMainAction(AmongUsBot bot, GameLobby lobby, Player player) {
        // Delete the sabotage menu message if we have its ID
        Integer menuMessageId = sabotageMenuMessageIds.get(player.getUserId());
        if (menuMessageId != null && player.getChatId() != null) {
            boolean deleted = bot.deleteMessage(player.getChatId(), menuMessageId);
            if (deleted) {
                sabotageMenuMessageIds.remove(player.getUserId());
                logger.debug("Deleted sabotage menu message {} for player {}", 
                        menuMessageId, player.getUserId());
            }
        }
        
        // Update the player's keyboard
        updatePlayerActionKeyboard(bot, lobby, player);
    }

    private void handleEmergencyMeetingAction(AmongUsBot bot, GameLobby lobby, Player player) {
        if (lobby == null || player == null) {
            logger.warn("Invalid parameters for emergency meeting action");
            return;
        }

        // Check if there's an active sabotage
        if (activeSabotage != SabotageType.NONE) {
            bot.sendTextMessage(player.getChatId(), 
                "‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–≤–∞—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Å–∞–±–æ—Ç–∞–∂–∞! –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ —Å–∞–±–æ—Ç–∞–∂.");
            updatePlayerActionKeyboard(bot, lobby, player);
            return;
        }

        // Check if player has reached emergency meeting limit
        int maxMeetings = lobby.getSettings().getEmergencyMeetings();
        if (player.hasReachedEmergencyMeetingLimit(maxMeetings)) {
            bot.sendTextMessage(player.getChatId(), 
                "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ —Å–≤–æ–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω–∏—è (" + maxMeetings + ").");
            updatePlayerActionKeyboard(bot, lobby, player);
            return;
        }

        // Check if another emergency meeting is already in progress
        if (emergencyMeetingInProgress.compareAndSet(false, true)) {
            // Increment the player's emergency meeting usage
            player.incrementEmergencyMeetingsUsed();
            
            // Notify all players about the emergency meeting
            for (Player p : lobby.getPlayerList()) {
                if (p.getChatId() != null) {
                    bot.sendTextMessage(p.getChatId(), 
                        "üö® " + player.getUserName() + " —Å–æ–∑–≤–∞–ª —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ!");
                }
            }
            
            lobby.addGameEvent(player.getUserId(), "EMERGENCY_MEETING", "–°–æ–∑–≤–∞–ª —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ");
            
            // Transition to discussion state
            GameState discussionState = new DiscussionState(player.getUserName(), null);
            lobby.setGameState(discussionState);
            discussionState.onEnter(bot, lobby);
        } else {
            bot.sendTextMessage(player.getChatId(), 
                "‚ùå –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ —É–∂–µ —Å–æ–∑—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º.");
            updatePlayerActionKeyboard(bot, lobby, player);
        }
    }

    private void handleTaskCompletion(AmongUsBot bot, GameLobby lobby, Player player) {
        int taskIndex = player.getAwaitingPhotoForTaskIndex();
        if (taskIndex >= 0 && taskIndex < player.getTotalTaskCount()) {
            // Complete the task
            player.completeTask(taskIndex);
            player.setAwaitingPhotoForTaskIndex(-1);

            if (player.getChatId() != null) {
                // Use correct progress calculation for impostors vs crewmates
                int progressPercent;
                if (player.isImpostor()) {
                    progressPercent = getFakeTaskCompletionPercentage(player.getUserId());
                } else {
                    progressPercent = player.getTaskCompletionPercentage();
                }
                
                bot.sendTextMessage(player.getChatId(), 
                    "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü—Ä–æ–≥—Ä–µ—Å—Å: " + progressPercent + "%");
            }

            // Log task completion
            logger.info("Player {} completed task {} in game {}", 
                    player.getUserId(), taskIndex, lobby.getLobbyCode());

            // Update player's action keyboard
            updatePlayerActionKeyboard(bot, lobby, player);

            // Check win conditions after task completion
            GameState nextState = checkWinConditions(bot, lobby);
            if (nextState != null) {
                lobby.setGameState(nextState);
                nextState.onEnter(bot, lobby);
            }
        }
    }

    /**
     * Initializes fake tasks for an impostor with the correct number based on settings.
     * 
     * @param impostorId The impostor's user ID
     * @param taskCount The number of tasks to assign (from lobby settings)
     */
    private void initializeFakeTasksForImpostor(Long impostorId, int taskCount) {
        List<String> fakeTasks = Arrays.asList(
            "–°–æ—á–Ω—ã–π –Ω–∞—Å–æ—Å", "–ù–∞–∫–ª–µ–π–∫–∞", "–†–∞–∑—É–∫—Ä–∞—à–∫–∞", "–•–æ–ª—Å—Ç", "–§–æ—Ç–æ–≥—Ä–∞—Ñ", 
            "–ß–µ—Ä–µ–ø–∞—à—å—è –º–µ—Ç–∫–æ—Å—Ç—å", "–°–ø–∞–π–¥–µ—Ä-–º–µ–Ω", "–ü–∞–∑–ª", "–ö–æ–ª—å—Ü–µ–±—Ä–æ—Å", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–°—Ç–∏—Ö–æ–ø–ª–µ—Ç"
        );
        
        // Create a shuffled copy of the fake tasks list
        List<String> shuffledTasks = new ArrayList<>(fakeTasks);
        Collections.shuffle(shuffledTasks);
        
        // Select the correct number of fake tasks based on settings
        int actualTaskCount = Math.min(taskCount, shuffledTasks.size());
        List<String> selectedTasks = new ArrayList<>(shuffledTasks.subList(0, actualTaskCount));
        
        // Store the selected tasks for this impostor
        fakeTasksByImpostor.put(impostorId, selectedTasks);
        
        // Initialize all tasks as not completed
        List<Boolean> completionStatus = new ArrayList<>();
        for (int i = 0; i < selectedTasks.size(); i++) {
            completionStatus.add(false);
        }
        fakeTaskCompletionByImpostor.put(impostorId, completionStatus);
        
        logger.debug("Initialized {} fake tasks for impostor {}", actualTaskCount, impostorId);
    }
}
// COMPLETED: GameActiveState class 