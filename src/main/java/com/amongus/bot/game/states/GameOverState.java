package com.amongus.bot.game.states;

import com.amongus.bot.core.AmongUsBot;
import com.amongus.bot.game.lobby.GameLobby;
import com.amongus.bot.models.Player;
import com.amongus.bot.models.GameEvent;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.InputFile;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**
 * Game state for when the game is over and a winner has been determined.
 */
public class GameOverState implements GameState {
    private static final Logger logger = LoggerFactory.getLogger(GameOverState.class);
    
    private static final String STATE_NAME = "GAME_OVER";
    
    private final String winner;
    private final String winReason;
    
    /**
     * Creates a new game over state with the specified winner and win reason.
     * 
     * @param winner The winner of the game ("Crewmates" or "Impostors")
     * @param winReason The reason for the win
     */
    public GameOverState(String winner, String winReason) {
        this.winner = winner;
        this.winReason = winReason;
    }
    
    @Override
    public String getStateName() {
        return STATE_NAME;
    }
    
    @Override
    public void onEnter(AmongUsBot bot, GameLobby lobby) {
        logger.info("Entered game over state for game {}, winner: {}", lobby.getLobbyCode(), winner);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã
        sendGameSummary(bot, lobby);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ –∏–≥—Ä–µ
        sendGameReport(bot, lobby);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º.
     */
    private void sendGameSummary(AmongUsBot bot, GameLobby lobby) {
        StringBuilder message = new StringBuilder();
        message.append("üèÅ **–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê!**\n\n");
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
        String winnerEmoji = winner.equalsIgnoreCase("Crewmates") ? "üë®‚ÄçüöÄ" : "üî™";
        message.append(winnerEmoji).append(" **").append(winner).append(" –ü–û–ë–ï–î–ò–õ–ò!**\n");
        message.append("üìã –ü—Ä–∏—á–∏–Ω–∞: ").append(winReason).append("\n\n");
        
        // –†–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤
        message.append("üë• **–†–û–õ–ò –ò–ì–†–û–ö–û–í:**\n");
        for (Player player : lobby.getPlayerList()) {
            String roleEmoji = player.isImpostor() ? "üî™" : "üë®‚ÄçüöÄ";
            String statusEmoji = player.isAlive() ? "‚úÖ" : "üíÄ";
            String roleName = player.isImpostor() ? "–ü—Ä–µ–¥–∞—Ç–µ–ª—å" : "–ß–ª–µ–Ω —ç–∫–∏–ø–∞–∂–∞";
            
            message.append(statusEmoji).append(" ").append(player.getUserName())
                   .append(" - ").append(roleEmoji).append(" ").append(roleName);
            
            // –î–ª—è —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π
            if (!player.isImpostor()) {
                int completed = player.getCompletedTaskCount();
                int total = player.getTotalTaskCount();
                message.append(" (").append(completed).append("/").append(total).append(" –∑–∞–¥–∞–Ω–∏–π)");
            }
            message.append("\n");
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        for (Player player : lobby.getPlayerList()) {
            try {
                Long chatId = player.getChatId() != null ? player.getChatId() : player.getUserId();
                bot.sendTextMessage(chatId, message.toString());
            } catch (Exception e) {
                logger.error("Failed to send game summary to player {}: {}", player.getUserId(), e.getMessage());
            }
        }
    }
    
    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ –∏–≥—Ä–µ.
     * 
     * @param bot –ë–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
     * @param lobby –ò–≥—Ä–æ–≤–æ–µ –ª–æ–±–±–∏
     */
    private void sendGameReport(AmongUsBot bot, GameLobby lobby) {
        logger.info("Preparing game report for lobby {}", lobby.getLobbyCode());
        
        List<GameEvent> events = lobby.getSortedGameEvents();
        logger.info("Found {} events for lobby {}", events.size(), lobby.getLobbyCode());
        
        // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
        if (events.isEmpty()) {
            logger.warn("No game events found for lobby {}, adding system game over event", lobby.getLobbyCode());
            Long hostId = lobby.getHostId();
            GameEvent systemEvent = lobby.addGameEvent(hostId, "GAME_OVER", "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: " + winner + " –ø–æ–±–µ–¥–∏–ª–∏");
            if (systemEvent != null) {
                events = lobby.getSortedGameEvents();
            } else {
                Player host = lobby.getPlayer(hostId);
                if (host != null) {
                    GameEvent tempEvent = new GameEvent(hostId, host.getUserName(), "GAME_OVER", "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: " + winner + " –ø–æ–±–µ–¥–∏–ª–∏");
                    events = new ArrayList<>();
                    events.add(tempEvent);
                }
            }
        }

        // –°—Ç—Ä–æ–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        StringBuilder reportBuilder = new StringBuilder();
        reportBuilder.append("üìä **–ü–û–î–†–û–ë–ù–´–ô –û–¢–ß–ï–¢ –û –ò–ì–†–ï**\n\n");
        
        // –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        List<GameEvent> killEvents = new ArrayList<>();
        List<GameEvent> taskEvents = new ArrayList<>();
        List<GameEvent> meetingEvents = new ArrayList<>();
        List<GameEvent> sabotageEvents = new ArrayList<>();
        List<GameEvent> voteEvents = new ArrayList<>();
        List<GameEvent> otherEvents = new ArrayList<>();
        
        for (GameEvent event : events) {
            String action = event.getAction().toUpperCase();
            switch (action) {
                case "KILL":
                    killEvents.add(event);
                    break;
                case "TASK":
                case "FAKE_TASK":
                    taskEvents.add(event);
                    break;
                case "REPORT":
                case "MEETING":
                    meetingEvents.add(event);
                    break;
                case "SABOTAGE":
                case "FIX_LIGHTS":
                case "FIX_REACTOR":
                    sabotageEvents.add(event);
                    break;
                case "VOTE":
                case "VOTE_RESULT":
                    voteEvents.add(event);
                    break;
                default:
                    otherEvents.add(event);
            }
        }
        
        // –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è —Å–æ–±—ã—Ç–∏–π
        reportBuilder.append("‚è∞ **–•–†–û–ù–û–õ–û–ì–ò–Ø –°–û–ë–´–¢–ò–ô:**\n");
        if (!events.isEmpty()) {
            boolean inVotingPhase = false;
            
            for (int i = 0; i < events.size(); i++) {
                GameEvent event = events.get(i);
                String action = event.getAction().toUpperCase();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ–ª–∞ –∏–ª–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ)
                if ((action.equals("REPORT") || action.equals("MEETING")) && !inVotingPhase) {
                    reportBuilder.append("\nüîç **--- –ù–ê–ß–ê–õ–û –ì–û–õ–û–°–û–í–ê–ù–ò–Ø ---**\n");
                    inVotingPhase = true;
                }
                
                reportBuilder.append(String.format("%d. %s\n", i + 1, event.getFormattedDescription()));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
                if ((action.equals("VOTE_RESULT") || action.equals("EJECTED")) && inVotingPhase) {
                    reportBuilder.append("üèÅ **--- –ö–û–ù–ï–¶ –ì–û–õ–û–°–û–í–ê–ù–ò–Ø ---**\n\n");
                    inVotingPhase = false;
                }
            }
        } else {
            reportBuilder.append("‚Ä¢ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π\n");
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        reportBuilder.append("\nüìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ë–´–¢–ò–ô:**\n");
        
        if (!killEvents.isEmpty()) {
            reportBuilder.append("üî™ **–£–±–∏–π—Å—Ç–≤–∞ (").append(killEvents.size()).append("):**\n");
            for (GameEvent event : killEvents) {
                reportBuilder.append("  ‚Ä¢ ").append(event.getFormattedDescription()).append("\n");
            }
            reportBuilder.append("\n");
        }
        
        if (!meetingEvents.isEmpty()) {
            reportBuilder.append("üö® **–°–æ–±—Ä–∞–Ω–∏—è –∏ –Ω–∞—Ö–æ–¥–∫–∏ —Ç–µ–ª (").append(meetingEvents.size()).append("):**\n");
            for (GameEvent event : meetingEvents) {
                reportBuilder.append("  ‚Ä¢ ").append(event.getFormattedDescription()).append("\n");
            }
            reportBuilder.append("\n");
        }
        
        if (!voteEvents.isEmpty()) {
            reportBuilder.append("üó≥Ô∏è **–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (").append(voteEvents.size()).append("):**\n");
            for (GameEvent event : voteEvents) {
                reportBuilder.append("  ‚Ä¢ ").append(event.getFormattedDescription()).append("\n");
            }
            reportBuilder.append("\n");
        }
        
        if (!sabotageEvents.isEmpty()) {
            reportBuilder.append("‚ö° **–°–∞–±–æ—Ç–∞–∂ –∏ –ø–æ—á–∏–Ω–∫–∏ (").append(sabotageEvents.size()).append("):**\n");
            for (GameEvent event : sabotageEvents) {
                reportBuilder.append("  ‚Ä¢ ").append(event.getFormattedDescription()).append("\n");
            }
            reportBuilder.append("\n");
        }
        
        if (!taskEvents.isEmpty()) {
            reportBuilder.append("üìã **–ó–∞–¥–∞–Ω–∏—è (").append(taskEvents.size()).append("):**\n");
            for (GameEvent event : taskEvents) {
                reportBuilder.append("  ‚Ä¢ ").append(event.getFormattedDescription()).append("\n");
            }
            reportBuilder.append("\n");
        }
        
        // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
        reportBuilder.append("üë§ **–ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n");
        
        // –ü–æ–¥—Å—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∏–≥—Ä–æ–∫–∞–º
        Map<Long, Map<String, Integer>> playerStats = new HashMap<>();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
        for (Player player : lobby.getPlayerList()) {
            playerStats.put(player.getUserId(), new HashMap<>());
        }
        
        // –ü–æ–¥—Å—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π
        for (GameEvent event : events) {
            Long userId = event.getUserId();
            String action = event.getAction();
            
            Map<String, Integer> stats = playerStats.get(userId);
            if (stats != null) {
                stats.put(action, stats.getOrDefault(action, 0) + 1);
            }
        }
        
        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        for (Player player : lobby.getPlayerList()) {
            Long userId = player.getUserId();
            Map<String, Integer> stats = playerStats.get(userId);
            
            String roleEmoji = player.isImpostor() ? "üî™" : "üë®‚ÄçüöÄ";
            String roleName = player.isImpostor() ? "–ü—Ä–µ–¥–∞—Ç–µ–ª—å" : "–ß–ª–µ–Ω —ç–∫–∏–ø–∞–∂–∞";
            String statusEmoji = player.isAlive() ? "‚úÖ" : "üíÄ";
            
            reportBuilder.append("\n").append(statusEmoji).append(" **").append(player.getUserName())
                         .append("** (").append(roleEmoji).append(" ").append(roleName).append("):\n");
            
            // –í—ã–≤–æ–¥–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —á–ª–µ–Ω–æ–≤ —ç–∫–∏–ø–∞–∂–∞
            if (!player.isImpostor()) {
                int completedTasks = player.getCompletedTaskCount();
                int totalTasks = player.getTotalTaskCount();
                int percentage = player.getTaskCompletionPercentage();
                reportBuilder.append("  üìã –ó–∞–¥–∞–Ω–∏—è: ").append(completedTasks).append("/").append(totalTasks)
                             .append(" (").append(percentage).append("%)\n");
            }
            
            // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–π—Å—Ç–≤–∏–π
            if (stats != null && !stats.isEmpty()) {
                for (Map.Entry<String, Integer> entry : stats.entrySet()) {
                    String actionName = getActionDisplayName(entry.getKey());
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö getActionDisplayName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null
                    if (actionName != null) {
                        reportBuilder.append("  ‚Ä¢ ").append(actionName).append(": ").append(entry.getValue()).append("\n");
                    }
                }
            } else {
                reportBuilder.append("  ‚Ä¢ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π\n");
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        String report = reportBuilder.toString();
        logger.info("Sending game report to {} players in lobby {}", lobby.getPlayerCount(), lobby.getLobbyCode());
        
        for (Player player : lobby.getPlayerList()) {
            try {
                Long chatId = player.getChatId() != null ? player.getChatId() : player.getUserId();
                bot.sendTextMessage(chatId, report);
                logger.info("Sent game report to player {} ({})", player.getUserName(), chatId);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if (!events.isEmpty()) {
                    sendEventPhotos(bot, lobby, player, events);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–æ–≤–æ–π –∏–≥—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ö–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç—á–µ—Ç–∞
                if (lobby.isHost(player.getUserId())) {
                    InlineKeyboardMarkup newGameKeyboard = createNewGameKeyboard();
                    SendMessage newGameMessage = new SendMessage();
                    newGameMessage.setChatId(chatId);
                    newGameMessage.setText("üéÆ **–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤–æ–π –∏–≥—Ä–µ?**");
                    newGameMessage.setReplyMarkup(newGameKeyboard);
                    bot.executeMethod(newGameMessage);
                }
                
            } catch (Exception e) {
                logger.error("Failed to send game report to player {}: {}", player.getUserId(), e.getMessage(), e);
                
                // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try {
                    Long chatId = player.getChatId() != null ? player.getChatId() : player.getUserId();
                    bot.sendTextMessage(chatId, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! " + winner + " –ø–æ–±–µ–¥–∏–ª–∏!\n\n–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.");
                } catch (Exception ex) {
                    logger.error("Failed even simple message to player {}: {}", player.getUserId(), ex.getMessage());
                }
            }
        }
    }
    
    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.
     */
    private String getActionDisplayName(String action) {
        switch (action.toUpperCase()) {
            case "KILL":
                return null; // –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–±–∏–π—Å—Ç–≤–∞ –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            case "TASK":
                return "üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π";
            case "REPORT":
                return "üö® –°–æ–æ–±—â–µ–Ω–∏–π –æ —Ç–µ–ª–µ";
            case "MEETING":
                return "üì¢ –°–æ–∑–≤–∞–Ω–æ —Å–æ–±—Ä–∞–Ω–∏–π";
            case "VOTE":
                return "üó≥Ô∏è –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–Ω–æ";
            case "EJECTED":
                return "üö™ –ò—Å–∫–ª—é—á—ë–Ω –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º";
            case "SABOTAGE":
                return "‚ö° –°–∞–±–æ—Ç–∞–∂–µ–π";
            case "FIX_LIGHTS":
                return "üí° –ü–æ—á–∏–Ω–æ–∫ —Å–≤–µ—Ç–∞";
            case "FIX_REACTOR":
                return "‚öõÔ∏è –ü–æ—á–∏–Ω–æ–∫ —Ä–µ–∞–∫—Ç–æ—Ä–∞";
            case "SCAN":
                return "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π";
            case "FAKE_TASK":
                return "üé≠ –ò–º–∏—Ç–∞—Ü–∏–π –∑–∞–¥–∞–Ω–∏–π";
            case "GAME_OVER":
                return "üèÅ –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã";
            case "VOTE_RESULT":
                return "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è";
            default:
                return action;
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä–æ–∫—É.
     * 
     * @param bot –ë–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
     * @param lobby –ò–≥—Ä–æ–≤–æ–µ –ª–æ–±–±–∏
     * @param player –ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ñ–æ—Ç–æ
     * @param events –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
     */
    private void sendEventPhotos(AmongUsBot bot, GameLobby lobby, Player player, List<GameEvent> events) {
        List<GameEvent> eventsWithPhotos = new ArrayList<>();
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        for (GameEvent event : events) {
            if (event != null && event.hasPhoto()) {
                eventsWithPhotos.add(event);
            }
        }
        
        if (eventsWithPhotos.isEmpty()) {
            logger.debug("No events with photos found for player {} in lobby {}", 
                    player.getUserId(), lobby.getLobbyCode());
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–ª–∏—á–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        Long chatId = player.getChatId();
        if (chatId == null) {
            chatId = player.getUserId();
        }
        
        try {
            bot.sendTextMessage(chatId, "–§–æ—Ç–æ–æ—Ç—á–µ—Ç –∏–≥—Ä—ã:");
            logger.info("Sending {} photos to player {} in lobby {}", 
                    eventsWithPhotos.size(), player.getUserName(), lobby.getLobbyCode());
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é
            for (GameEvent event : eventsWithPhotos) {
                try {
                    SendPhoto sendPhoto = new SendPhoto();
                    sendPhoto.setChatId(chatId);
                    sendPhoto.setPhoto(new InputFile(event.getPhotoFileId()));
                    sendPhoto.setCaption(event.getFormattedDescription());
                    
                    bot.execute(sendPhoto);
                    
                    // –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram API
                    Thread.sleep(100);
                } catch (Exception e) {
                    logger.error("Failed to send photo for event {}: {}", 
                            event.getFormattedDescription(), e.getMessage());
                }
            }
        } catch (Exception e) {
            logger.error("Failed to send photo report to player {}: {}", 
                    player.getUserId(), e.getMessage());
        }
    }
    
    @Override
    public void onExit(AmongUsBot bot, GameLobby lobby) {
        logger.info("Exited game over state for game {}", lobby.getLobbyCode());
        
        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
        lobby.clearGameEvents();
    }
    
    @Override
    public GameState handleUpdate(AmongUsBot bot, GameLobby lobby, Update update) {
        if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            Long userId = update.getCallbackQuery().getFrom().getId();
            
            if (callbackData.equals("new_game") && lobby.isHost(userId)) {
                // Create a new game with the same players
                logger.info("Starting a new game from game {}", lobby.getLobbyCode());
                
                // Reset all players
                for (Player player : lobby.getPlayerList()) {
                    player.reset();
                    logger.debug("Reset player {} state for new game in lobby {}", 
                            player.getUserId(), lobby.getLobbyCode());
                    
                    if (player.getChatId() != null) {
                        bot.sendTextMessage(player.getChatId(), 
                                "üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ª–æ–±–±–∏...");
                    }
                }
                
                // Return to the lobby state
                return new LobbyState();
            }
        }
        
        return null; // Stay in the current state
    }
    
    @Override
    public boolean canPerformAction(GameLobby lobby, Long userId, String action) {
        if (action.equals("new_game")) {
            return lobby.isHost(userId);
        }
        return false;
    }
    
    /**
     * Creates a keyboard with a button to start a new game.
     * 
     * @return The inline keyboard markup
     */
    private InlineKeyboardMarkup createNewGameKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton newGameButton = new InlineKeyboardButton();
        newGameButton.setText("–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É");
        newGameButton.setCallbackData("new_game");
        row.add(newGameButton);
        keyboard.add(row);
        
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }
}
// COMPLETED: GameOverState class 