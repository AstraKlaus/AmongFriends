package com.amongus.bot.handlers;

import com.amongus.bot.core.AmongUsBot;
import com.amongus.bot.game.lobby.GameLobby;
import com.amongus.bot.managers.LobbyManager;
import com.amongus.bot.game.states.LobbyState;
import com.amongus.bot.models.Player;
import com.amongus.bot.handlers.SettingsHandler;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;

/**
 * Handler for bot commands that start with /.
 */
public class CommandHandler {
    private static final Logger logger = LoggerFactory.getLogger(CommandHandler.class);
    
    private final AmongUsBot bot;
    private final LobbyManager lobbyManager;
    private final SettingsHandler settingsHandler;
    
    public CommandHandler(AmongUsBot bot, LobbyManager lobbyManager) {
        this.bot = bot;
        this.lobbyManager = lobbyManager;
        this.settingsHandler = new SettingsHandler(bot, lobbyManager);
        logger.debug("CommandHandler initialized");
    }
    
    public void handle(Update update) {
        Message message = update.getMessage();
        String text = message.getText();
        Long chatId = message.getChatId();
        User user = message.getFrom();
        Long userId = user.getId();
        String userName = user.getUserName() != null ? user.getUserName() : user.getFirstName();
        
        // Extract command and arguments
        String[] parts = text.split("\\s+", 2);
        String command = parts[0].toLowerCase();
        String args = parts.length > 1 ? parts[1].trim() : "";
        
        logger.info("Handling command '{}' from user {} ({}), args: [{}]", command, userName, userId, args);
        
        try {
            switch (command) {
                case "/start":
                    handleStartCommand(chatId);
                    break;
                case "/help":
                    handleHelpCommand(chatId);
                    break;
                case "/newgame":
                    handleNewGameCommand(chatId, userId, userName);
                    break;
                case "/join":
                    handleJoinCommand(chatId, userId, userName, args);
                    break;
                case "/leave":
                    handleLeaveCommand(chatId, userId);
                    break;
                case "/startgame":
                    handleStartGameCommand(chatId, userId);
                    break;
                case "/status":
                    handleStatusCommand(chatId, userId);
                    break;
                case "/players":
                    handlePlayersCommand(chatId, userId);
                    break;
                case "/settings":
                    handleSettingsCommand(chatId, user, bot);
                    break;
                case "/set":
                    handleSetCommand(chatId, user, args, bot);
                    break;
                case "/reset":
                    handleResetSettingsCommand(chatId, userId);
                    break;
                default:
                    handleUnknownCommand(chatId);
            }
        } catch (Exception e) {
            logger.error("Error handling command {}: {}", command, e.getMessage(), e);
            bot.sendTextMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help.");
        }
    }
    
    private void handleStartCommand(Long chatId) {
        logger.debug("Handling /start command in chat: {}", chatId);
        
        String welcomeMessage = "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Among Us Telegram Bot!*\n\n" +
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ.\n\n" +
                "*–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:*\n" +
                "‚Ä¢ –ü–µ—Ä–µ–¥–≤–∏–≥–∞–π—Ç–µ—Å—å —Å–ø–æ–∫–æ–π–Ω–æ –∏ –Ω–µ—Å–ø–µ—à–∞\n" +
                "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –ø–∞—Ä–∞–º–∏ –∏–ª–∏ –≥—Ä—É–ø–ø–∞–º–∏\n" +
                "‚Ä¢ –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –∑–∞ —Å–æ–±–æ–π –¥–≤–µ—Ä–∏\n" +
                "‚Ä¢ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∏–≥—Ä—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n" +
                "‚Ä¢ –ù–µ –ø–æ–¥–≥–ª—è–¥—ã–≤–∞–π—Ç–µ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –Ω–µ –ø—Ä–æ—Å–∏—Ç–µ –∏—Ö –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏\n" +
                "‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ, –ø–æ–ª—É—á–∞—è —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–º–µ—Å—Ç–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.";
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(welcomeMessage);
        message.enableMarkdown(true);
        message.setReplyMarkup(createWelcomeKeyboard());
        
        bot.executeMethod(message);
        logger.debug("Sent welcome message to chat: {}", chatId);
    }
    
    /**
     * Creates a keyboard for the welcome message with basic commands.
     * 
     * @return An inline keyboard markup
     */
    private InlineKeyboardMarkup createWelcomeKeyboard() {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // First row - Create and Join
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        
        InlineKeyboardButton createGameButton = new InlineKeyboardButton();
        createGameButton.setText("üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É");
        createGameButton.setCallbackData("command_newgame");
        row1.add(createGameButton);
        
        InlineKeyboardButton joinGameButton = new InlineKeyboardButton();
        joinGameButton.setText("üîë –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ");
        joinGameButton.setCallbackData("command_promptjoin");
        row1.add(joinGameButton);
        
        keyboard.add(row1);
        
        // Second row - Help
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        
        InlineKeyboardButton helpButton = new InlineKeyboardButton();
        helpButton.setText("‚ùì –ü–æ–º–æ—â—å");
        helpButton.setCallbackData("command_help");
        row2.add(helpButton);
        
        keyboard.add(row2);
        
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        keyboardMarkup.setKeyboard(keyboard);
        
        return keyboardMarkup;
    }
    
    private void handleHelpCommand(Long chatId) {
        logger.debug("Handling /help command in chat: {}", chatId);
        
        String helpMessage = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                "/start - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
                "/newgame - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ª–æ–±–±–∏\n" +
                "/join <–∫–æ–¥> - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä–µ –ø–æ –∫–æ–¥—É –ª–æ–±–±–∏\n" +
                "/leave - –ü–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É\n" +
                "/startgame - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ö–æ—Å—Ç–∞ –ª–æ–±–±–∏)\n" +
                "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã\n" +
                "/players - –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –ª–æ–±–±–∏\n" +
                "/endgame - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ö–æ—Å—Ç–∞ –ª–æ–±–±–∏)\n" +
                "/settings - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫\n" +
                "/reset - –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é";
        
        bot.sendTextMessage(chatId, helpMessage);
        logger.debug("Sent help message to chat: {}", chatId);
    }
    
    private void handleNewGameCommand(Long chatId, Long userId, String userName) {
        logger.debug("Handling /newgame command from user {} in chat: {}", userId, chatId);
        
        // Check if user is already in a game
        GameLobby existingLobby = lobbyManager.getLobbyForPlayer(userId);
        if (existingLobby != null) {
            logger.info("User {} is already in lobby {}, cannot create new game", userId, existingLobby.getLobbyCode());
            
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–±–±–∏ (" + existingLobby.getLobbyCode() + 
                    "). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É.");
            message.setReplyMarkup(createExistingLobbyKeyboard(existingLobby.getLobbyCode()));
            bot.executeMethod(message);
            return;
        }
        
        // Create a new game lobby
        GameLobby lobby = lobbyManager.createLobby(userId, userName);
        logger.info("Created new game lobby {} for user {}", lobby.getLobbyCode(), userId);
        
        // Set initial game state
        lobby.setGameState(new LobbyState());
        logger.debug("Set initial LobbyState for lobby {}", lobby.getLobbyCode());
        
        // Store chat ID for the player
        Player player = lobby.getPlayer(userId);
        if (player != null) {
            player.setChatId(chatId);
            logger.debug("Set chatId {} for player {}", chatId, userId);
        }
        
        // Send confirmation message with buttons
        String message = "*–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –ª–æ–±–±–∏ –∏–≥—Ä—ã!*\n\n" +
                "*–ö–æ–¥ –ª–æ–±–±–∏:* `" + lobby.getLobbyCode() + "`\n\n" +
                "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π.";
        
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(message);
        sendMessage.enableMarkdown(true);
        sendMessage.setReplyMarkup(createLobbyHostKeyboard(lobby.getLobbyCode()));
        
        bot.executeMethod(sendMessage);
        logger.info("Successfully created new game lobby {} for user {}", lobby.getLobbyCode(), userId);
    }
    
    /**
     * Creates a keyboard for a lobby host with game control buttons.
     * 
     * @param lobbyCode The lobby code
     * @return An inline keyboard markup
     */
    private InlineKeyboardMarkup createLobbyHostKeyboard(String lobbyCode) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // First row - Start game and settings
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        
        InlineKeyboardButton startGameButton = new InlineKeyboardButton();
        startGameButton.setText("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É");
        startGameButton.setCallbackData("command_startgame");
        row1.add(startGameButton);
        
        InlineKeyboardButton settingsButton = new InlineKeyboardButton();
        settingsButton.setText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏");
        settingsButton.setCallbackData("command_settings");
        row1.add(settingsButton);
        
        keyboard.add(row1);
        
        // Second row - View players and leave
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        
        InlineKeyboardButton playersButton = new InlineKeyboardButton();
        playersButton.setText("üë• –ò–≥—Ä–æ–∫–∏");
        playersButton.setCallbackData("command_players");
        row2.add(playersButton);
        
        InlineKeyboardButton leaveButton = new InlineKeyboardButton();
        leaveButton.setText("üö™ –ü–æ–∫–∏–Ω—É—Ç—å –ª–æ–±–±–∏");
        leaveButton.setCallbackData("command_leave");
        row2.add(leaveButton);
        
        keyboard.add(row2);
        
        // Optional third row - copy lobby code button
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        
        InlineKeyboardButton copyCodeButton = new InlineKeyboardButton();
        copyCodeButton.setText("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥");
        copyCodeButton.setCallbackData("command_copycode_" + lobbyCode);
        row3.add(copyCodeButton);
        
        keyboard.add(row3);
        
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        keyboardMarkup.setKeyboard(keyboard);
        
        logger.info("Created lobby host keyboard with buttons: Start Game (command_startgame), " +
                  "Settings (command_settings), Players (command_players), " +
                  "Leave (command_leave), Copy Code (command_copycode_" + lobbyCode + ")");
        
        return keyboardMarkup;
    }
    
    /**
     * Creates a keyboard for when a user is already in a lobby.
     * 
     * @param lobbyCode The lobby code
     * @return An inline keyboard markup
     */
    private InlineKeyboardMarkup createExistingLobbyKeyboard(String lobbyCode) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // First row - Lobby actions
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        
        InlineKeyboardButton returnButton = new InlineKeyboardButton();
        returnButton.setText("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏");
        returnButton.setCallbackData("command_status");
        row1.add(returnButton);
        
        InlineKeyboardButton leaveButton = new InlineKeyboardButton();
        leaveButton.setText("üö™ –ü–æ–∫–∏–Ω—É—Ç—å –ª–æ–±–±–∏");
        leaveButton.setCallbackData("command_leave");
        row1.add(leaveButton);
        
        keyboard.add(row1);
        
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        keyboardMarkup.setKeyboard(keyboard);
        
        return keyboardMarkup;
    }
    
    /**
     * Creates a keyboard for a player in lobby, with host privileges if applicable.
     * 
     * @param lobbyCode The lobby code
     * @param isHost Whether the player is the host
     * @return An inline keyboard markup
     */
    private InlineKeyboardMarkup createLobbyKeyboardForPlayer(String lobbyCode, boolean isHost) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        if (isHost) {
            // First row - Start game and settings (only for host)
            List<InlineKeyboardButton> row1 = new ArrayList<>();
            
            InlineKeyboardButton startGameButton = new InlineKeyboardButton();
            startGameButton.setText("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É");
            startGameButton.setCallbackData("command_startgame");
            row1.add(startGameButton);
            
            InlineKeyboardButton settingsButton = new InlineKeyboardButton();
            settingsButton.setText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏");
            settingsButton.setCallbackData("command_settings");
            row1.add(settingsButton);
            
            keyboard.add(row1);
        } else {
            // First row - Settings for non-hosts (view only)
            List<InlineKeyboardButton> row1 = new ArrayList<>();
            
            InlineKeyboardButton settingsButton = new InlineKeyboardButton();
            settingsButton.setText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏");
            settingsButton.setCallbackData("command_settings");
            row1.add(settingsButton);
            
            keyboard.add(row1);
        }
        
        // Second row - View players and leave (for all players)
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        
        InlineKeyboardButton playersButton = new InlineKeyboardButton();
        playersButton.setText("üë• –ò–≥—Ä–æ–∫–∏");
        playersButton.setCallbackData("command_players");
        row2.add(playersButton);
        
        InlineKeyboardButton leaveButton = new InlineKeyboardButton();
        leaveButton.setText("üö™ –ü–æ–∫–∏–Ω—É—Ç—å –ª–æ–±–±–∏");
        leaveButton.setCallbackData("command_leave");
        row2.add(leaveButton);
        
        keyboard.add(row2);
        
        // Third row - copy lobby code button (for all players)
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        
        InlineKeyboardButton copyCodeButton = new InlineKeyboardButton();
        copyCodeButton.setText("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥");
        copyCodeButton.setCallbackData("command_copycode_" + lobbyCode);
        row3.add(copyCodeButton);
        
        keyboard.add(row3);
        
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        keyboardMarkup.setKeyboard(keyboard);
        
        return keyboardMarkup;
    }
    
    private void handleJoinCommand(Long chatId, Long userId, String userName, String lobbyCode) {
        logger.debug("Handling /join command from user {} in chat: {} with code: {}", userId, chatId, lobbyCode);
        
        // Check if lobby code was provided
        if (lobbyCode == null || lobbyCode.trim().isEmpty()) {
            logger.warn("User {} did not provide a lobby code", userId);
            
            // Create a keyboard to prompt for the code with a force reply
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ª–æ–±–±–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: /join ABCDEF");
            
            // Add buttons for common actions
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();
            
            InlineKeyboardButton newGameButton = new InlineKeyboardButton();
            newGameButton.setText("üéÆ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É");
            newGameButton.setCallbackData("command_newgame");
            row.add(newGameButton);
            
            InlineKeyboardButton helpButton = new InlineKeyboardButton();
            helpButton.setText("‚ùì –ü–æ–º–æ—â—å");
            helpButton.setCallbackData("command_help");
            row.add(helpButton);
            
            keyboard.add(row);
            
            InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
            keyboardMarkup.setKeyboard(keyboard);
            message.setReplyMarkup(keyboardMarkup);
            
            bot.executeMethod(message);
            return;
        }
        
        // Normalize the lobby code (convert to uppercase and trim)
        lobbyCode = lobbyCode.trim().toUpperCase();
        
        // Check if user is already in a game
        GameLobby existingLobby = lobbyManager.getLobbyForPlayer(userId);
        if (existingLobby != null) {
            // If trying to join the same lobby, just inform the user
            if (existingLobby.getLobbyCode().equals(lobbyCode)) {
                logger.info("User {} is already in lobby {}", userId, lobbyCode);
                
                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                message.setText("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–º –ª–æ–±–±–∏.");
                message.setReplyMarkup(createLobbyKeyboardForPlayer(lobbyCode, existingLobby.isHost(userId)));
                
                bot.executeMethod(message);
                return;
            }
            
            // Otherwise, ask them to leave first
            logger.info("User {} is already in lobby {}, cannot join {}", userId, existingLobby.getLobbyCode(), lobbyCode);
            
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–±–±–∏ (" + existingLobby.getLobbyCode() + 
                    "). –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.");
            message.setReplyMarkup(createExistingLobbyKeyboard(existingLobby.getLobbyCode()));
            
            bot.executeMethod(message);
            return;
        }
        
        // Try to join the lobby
        boolean joinSuccess = lobbyManager.addPlayerToLobby(lobbyCode, userId, userName);
        if (!joinSuccess) {
            logger.warn("Failed to join lobby {} for user {}", lobbyCode, userId);
            
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–æ–±–±–∏ —Å –∫–æ–¥–æ–º: " + lobbyCode + 
                    "\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.");
            
            // Add buttons to create new game or try again
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();
            
            InlineKeyboardButton newGameButton = new InlineKeyboardButton();
            newGameButton.setText("üéÆ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É");
            newGameButton.setCallbackData("command_newgame");
            row.add(newGameButton);
            
            InlineKeyboardButton tryAgainButton = new InlineKeyboardButton();
            tryAgainButton.setText("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞");
            tryAgainButton.setCallbackData("command_promptjoin");
            row.add(tryAgainButton);
            
            keyboard.add(row);
            
            InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
            keyboardMarkup.setKeyboard(keyboard);
            message.setReplyMarkup(keyboardMarkup);
            
            bot.executeMethod(message);
            return;
        }
        
        // Get the lobby reference after joining
        GameLobby lobby = lobbyManager.getLobby(lobbyCode);
        
        // Set chat ID for the player
        Player player = lobby.getPlayer(userId);
        if (player != null) {
            player.setChatId(chatId);
            logger.debug("Set chatId {} for player {}", chatId, userId);
        }
        
        // Send confirmation message with buttons
        String message = "*–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏: " + lobbyCode + "*\n\n" +
                "–í —ç—Ç–æ–º –ª–æ–±–±–∏ —Å–µ–π—á–∞—Å " + lobby.getPlayerCount() + " –∏–≥—Ä–æ–∫–æ–≤.\n" +
                "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.";
        
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(message);
        sendMessage.enableMarkdown(true);
        
        // Create full keyboard with all options for joined player
        boolean isHost = lobby.isHost(userId);
        sendMessage.setReplyMarkup(createLobbyKeyboardForPlayer(lobbyCode, isHost));
        
        bot.executeMethod(sendMessage);
        logger.info("User {} successfully joined lobby {}", userId, lobbyCode);
        
        // Notify the host
        Long hostId = lobby.getHostId();
        if (hostId != null && !hostId.equals(userId)) {
            Player host = lobby.getPlayer(hostId);
            if (host != null && host.getChatId() != null) {
                bot.sendTextMessage(host.getChatId(), userName + " –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≤–∞—à–µ–º—É –ª–æ–±–±–∏.");
                logger.debug("Notified host {} about user {} joining", hostId, userId);
            }
        }
        
        // If the lobby has a game state, notify it about the player joining
        if (lobby.getGameState() != null && lobby.getGameState() instanceof LobbyState) {
            lobby.getGameState().onEnter(bot, lobby);
            logger.debug("Triggered onEnter for LobbyState after user {} joined lobby {}", userId, lobbyCode);
        }
    }
    
    private void handleLeaveCommand(Long chatId, Long userId) {
        logger.debug("Handling /leave command from user {} in chat: {}", userId, chatId);
        
        // Check if user is in a game
        GameLobby lobby = lobbyManager.getLobbyForPlayer(userId);
        if (lobby == null) {
            logger.info("User {} is not in any lobby", userId);
            bot.sendTextMessage(chatId, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–æ–≤–æ–º –ª–æ–±–±–∏.");
            return;
        }
        
        String lobbyCode = lobby.getLobbyCode();
        boolean wasHost = lobby.isHost(userId);
        String userName = lobby.getPlayer(userId).getUserName();
        
        // Try to leave the lobby
        boolean success = lobbyManager.removePlayerFromLobby(userId);
        if (!success) {
            logger.info("User {} is not in any lobby", userId);
            bot.sendTextMessage(chatId, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–æ–≤–æ–º –ª–æ–±–±–∏.");
            return;
        }
        
        // Send confirmation message
        bot.sendTextMessage(chatId, "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏: " + lobbyCode);
        logger.info("User {} successfully left lobby {}", userId, lobbyCode);
        
        // Lobby may have been removed if it's empty now
        lobby = lobbyManager.getLobby(lobbyCode);
        if (lobby != null) {
            // If there's a new host, notify them
            if (wasHost && !lobby.isEmpty()) {
                Long newHostId = lobby.getHostId();
                if (newHostId != null) {
                    Player newHost = lobby.getPlayer(newHostId);
                    if (newHost != null && newHost.getChatId() != null) {
                        bot.sendTextMessage(newHost.getChatId(), 
                                "–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–æ—Å—Ç –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É. –¢–µ–ø–µ—Ä—å –≤—ã —Ö–æ—Å—Ç —ç—Ç–æ–≥–æ –ª–æ–±–±–∏. " +
                                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startgame, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –∫–æ–≥–¥–∞ –≤—Å–µ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã.");
                        logger.debug("Notified new host {} after previous host left", newHostId);
                    }
                }
            }
            
            // Notify remaining players
            for (Player player : lobby.getPlayerList()) {
                if (player.getChatId() != null && !player.getUserId().equals(userId)) {
                    bot.sendTextMessage(player.getChatId(), userName + " –ø–æ–∫–∏–Ω—É–ª –ª–æ–±–±–∏.");
                    logger.debug("Notified player {} about user {} leaving", player.getUserId(), userId);
                }
            }
            
            // If the lobby has a game state, update it
            if (lobby.getGameState() != null && lobby.getGameState() instanceof LobbyState) {
                lobby.getGameState().onEnter(bot, lobby);
                logger.debug("Triggered onEnter for LobbyState after user {} left lobby {}", userId, lobbyCode);
            }
        }
    }
    
    private void handleStartGameCommand(Long chatId, Long userId) {
        logger.debug("Handling /startgame command from user {} in chat: {}", userId, chatId);
        
        // Check if user is in a game
        GameLobby lobby = lobbyManager.getLobbyForPlayer(userId);
        if (lobby == null) {
            logger.info("User {} is not in any lobby", userId);
            bot.sendTextMessage(chatId, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–æ–≤–æ–º –ª–æ–±–±–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newgame, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ.");
            return;
        }
        
        // Check if user is the host
        if (!lobby.isHost(userId)) {
            logger.info("User {} is not the host of lobby {}", userId, lobby.getLobbyCode());
            bot.sendTextMessage(chatId, "–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.");
            return;
        }
        
        // Check if there are enough players
        if (!lobby.hasEnoughPlayers()) {
            logger.info("Not enough players in lobby {} to start the game", lobby.getLobbyCode());
            bot.sendTextMessage(chatId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º " + 
                    "4 –∏–≥—Ä–æ–∫–∞ (—Å–µ–π—á–∞—Å –≤ –ª–æ–±–±–∏: " + lobby.getPlayerCount() + ").");
            return;
        }
        
        // If game state is already LobbyState, it will handle the start game request
        if (lobby.getGameState() != null && lobby.getGameState().canPerformAction(lobby, userId, "start_game")) {
            logger.info("Starting game in lobby {}", lobby.getLobbyCode());
            
            // Let the current game state handle the start game request
            lobby.getGameState().handleUpdate(bot, lobby, null);
            
            bot.sendTextMessage(chatId, "–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!");
            logger.info("Game successfully started in lobby {}", lobby.getLobbyCode());
        } else {
            logger.warn("Cannot start game in lobby {} - invalid state", lobby.getLobbyCode());
            bot.sendTextMessage(chatId, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.");
        }
    }
    
    private void handleStatusCommand(Long chatId, Long userId) {
        logger.debug("Handling /status command from user {} in chat: {}", userId, chatId);
        
        // Check if user is in a game
        GameLobby lobby = lobbyManager.getLobbyForPlayer(userId);
        if (lobby == null) {
            logger.info("User {} is not in any lobby", userId);
            bot.sendTextMessage(chatId, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–æ–≤–æ–º –ª–æ–±–±–∏.");
            return;
        }
        
        // Get game status
        String status = "–õ–æ–±–±–∏: " + lobby.getLobbyCode() + "\n" +
                "–ò–≥—Ä–æ–∫–æ–≤: " + lobby.getPlayerCount() + "\n" +
                "–•–æ—Å—Ç: " + lobby.getPlayer(lobby.getHostId()).getUserName() + "\n" +
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã: " + (lobby.getGameState() != null ? lobby.getGameState().getStateName() : "–ù–µ—Ç");
        
        bot.sendTextMessage(chatId, status);
        logger.debug("Sent status information for lobby {} to user {}", lobby.getLobbyCode(), userId);
    }
    
    private void handlePlayersCommand(Long chatId, Long userId) {
        logger.debug("Handling /players command from user {} in chat: {}", userId, chatId);
        
        // Check if user is in a game
        GameLobby lobby = lobbyManager.getLobbyForPlayer(userId);
        if (lobby == null) {
            logger.info("User {} is not in any lobby", userId);
            bot.sendTextMessage(chatId, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–æ–≤–æ–º –ª–æ–±–±–∏.");
            return;
        }
        
        // Get player list
        List<Player> players = lobby.getPlayerList();
        StringBuilder playerList = new StringBuilder();
        playerList.append("–ò–≥—Ä–æ–∫–∏ –≤ –ª–æ–±–±–∏ ").append(lobby.getLobbyCode()).append(":\n\n");
        
        for (Player player : players) {
            String hostMark = lobby.isHost(player.getUserId()) ? " (–•–æ—Å—Ç)" : "";
            playerList.append("- ").append(player.getUserName()).append(hostMark).append("\n");
        }
        
        bot.sendTextMessage(chatId, playerList.toString());
        logger.debug("Sent player list for lobby {} to user {}", lobby.getLobbyCode(), userId);
    }
    
    private void handleUnknownCommand(Long chatId) {
        logger.debug("Handling unknown command in chat: {}", chatId);
        bot.sendTextMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.");
    }
    
    private void handleSettingsCommand(Long chatId, User user, AmongUsBot bot) {
        if (user == null) {
            bot.sendTextMessage(chatId, "–û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");
            return;
        }
        
        Long userId = user.getId();
        GameLobby lobby = lobbyManager.getLobbyForPlayer(userId);
        
        if (lobby == null) {
            bot.sendTextMessage(chatId, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–æ–≤–æ–º –ª–æ–±–±–∏. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –ª–æ–±–±–∏.");
            return;
        }
        
        // Use the SettingsHandler to display an interactive settings menu
        settingsHandler.handleOpenSettings(lobby, chatId, null);
    }
    
    private void handleSetCommand(Long chatId, User user, String args, AmongUsBot bot) {
        if (user == null) {
            bot.sendTextMessage(chatId, "–û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.");
            return;
        }
        
        Long userId = user.getId();
        GameLobby lobby = lobbyManager.getLobbyForPlayer(userId);
        
        if (lobby == null) {
            bot.sendTextMessage(chatId, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–æ–≤–æ–º –ª–æ–±–±–∏. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –ª–æ–±–±–∏.");
            return;
        }
        
        // Recommend using the new settings interface
        bot.sendTextMessage(chatId, "üÜï –ú—ã —É–ª—É—á—à–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–≤–æ–º—É –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
        
        // Open the settings menu
        settingsHandler.handleOpenSettings(lobby, chatId, null);
    }
    
    private void handleResetSettingsCommand(Long chatId, Long userId) {
        GameLobby lobby = lobbyManager.getLobbyForPlayer(userId);
        if (lobby == null) {
            bot.sendTextMessage(chatId, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–±–±–∏.");
            return;
        }

        if (!userId.equals(lobby.getHostId())) {
            bot.sendTextMessage(chatId, "–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã.");
            return;
        }

        if (lobby.getGameState() != null && !(lobby.getGameState() instanceof com.amongus.bot.game.states.LobbyState)) {
            bot.sendTextMessage(chatId, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.");
            return;
        }

        lobby.resetSettings();
        bot.sendTextMessage(chatId, "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n" + lobby.getSettings().getSettingsSummary());
    }
}
// COMPLETED: CommandHandler class 